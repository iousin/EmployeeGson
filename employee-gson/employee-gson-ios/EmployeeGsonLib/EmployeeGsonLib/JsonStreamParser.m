//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/JsonStreamParser.java
//

#include "J2ObjC_source.h"
#include "JsonElement.h"
#include "JsonIOException.h"
#include "JsonParseException.h"
#include "JsonReader.h"
#include "JsonStreamParser.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "MalformedJsonException.h"
#include "Streams.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/StackOverflowError.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"

@interface GsonJsonStreamParser () {
 @public
  GsonJsonReader *parser_;
  id lock_;
}

@end

J2OBJC_FIELD_SETTER(GsonJsonStreamParser, parser_, GsonJsonReader *)
J2OBJC_FIELD_SETTER(GsonJsonStreamParser, lock_, id)

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/JsonStreamParser.java"


#line 52
@implementation GsonJsonStreamParser


#line 60
- (instancetype)initWithNSString:(NSString *)json {
  GsonJsonStreamParser_initWithNSString_(self, json);
  return self;
}


#line 68
- (instancetype)initWithJavaIoReader:(JavaIoReader *)reader {
  GsonJsonStreamParser_initWithJavaIoReader_(self, reader);
  return self;
}


#line 81
- (GsonJsonElement *)next {
  if (![self hasNext]) {
    @throw new_JavaUtilNoSuchElementException_init();
  }
  
#line 86
  @try {
    return GsonStreams_parseWithGsonJsonReader_(parser_);
  }
  @catch (
#line 88
  JavaLangStackOverflowError *e) {
    @throw new_GsonJsonParseException_initWithNSString_withJavaLangThrowable_(@"Failed parsing JSON source to Json", e);
  }
  @catch (
#line 90
  JavaLangOutOfMemoryError *e) {
    @throw new_GsonJsonParseException_initWithNSString_withJavaLangThrowable_(@"Failed parsing JSON source to Json", e);
  }
  @catch (
#line 92
  GsonJsonParseException *e) {
    @throw [[e getCause] isKindOfClass:[JavaIoEOFException class]] ? new_JavaUtilNoSuchElementException_init() : (id) e;
  }
}


#line 102
- (jboolean)hasNext {
  @synchronized(lock_) {
    @try {
      return [((GsonJsonReader *) nil_chk(parser_)) peek] != JreLoadEnum(GsonJsonToken, END_DOCUMENT);
    }
    @catch (
#line 106
    GsonMalformedJsonException *e) {
      @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
    }
    @catch (
#line 108
    JavaIoIOException *e) {
      @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
    }
  }
}


#line 119
- (void)remove {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithJavaIoReader:);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(hasNext);
  methods[4].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", "LGsonJsonReader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LJavaIoReader;", "LGsonJsonParseException;", "Ljava/lang/Object;Ljava/util/Iterator<Lcom/google/gson/JsonElement;>;" };
  static const J2ObjcClassInfo _GsonJsonStreamParser = { "JsonStreamParser", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 5, 2, -1, -1, -1, 3, -1 };
  return &_GsonJsonStreamParser;
}

@end


#line 60
void GsonJsonStreamParser_initWithNSString_(GsonJsonStreamParser *self, NSString *json) {
  GsonJsonStreamParser_initWithJavaIoReader_(self, new_JavaIoStringReader_initWithNSString_(json));
}


#line 60
GsonJsonStreamParser *new_GsonJsonStreamParser_initWithNSString_(NSString *json) {
  J2OBJC_NEW_IMPL(GsonJsonStreamParser, initWithNSString_, json)
}


#line 60
GsonJsonStreamParser *create_GsonJsonStreamParser_initWithNSString_(NSString *json) {
  J2OBJC_CREATE_IMPL(GsonJsonStreamParser, initWithNSString_, json)
}


#line 68
void GsonJsonStreamParser_initWithJavaIoReader_(GsonJsonStreamParser *self, JavaIoReader *reader) {
  NSObject_init(self);
  
#line 69
  self->parser_ = new_GsonJsonReader_initWithJavaIoReader_(reader);
  [self->parser_ setLenientWithBoolean:true];
  self->lock_ = new_NSObject_init();
}


#line 68
GsonJsonStreamParser *new_GsonJsonStreamParser_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_NEW_IMPL(GsonJsonStreamParser, initWithJavaIoReader_, reader)
}


#line 68
GsonJsonStreamParser *create_GsonJsonStreamParser_initWithJavaIoReader_(JavaIoReader *reader) {
  J2OBJC_CREATE_IMPL(GsonJsonStreamParser, initWithJavaIoReader_, reader)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonJsonStreamParser)

J2OBJC_NAME_MAPPING(GsonJsonStreamParser, "com.google.gson", "Gson")
