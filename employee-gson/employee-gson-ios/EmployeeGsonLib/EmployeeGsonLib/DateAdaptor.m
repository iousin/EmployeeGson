//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/employee/gson/DateAdaptor.java
//

#include "DateAdaptor.h"
#include "J2ObjC_source.h"
#include "JsonDeserializationContext.h"
#include "JsonElement.h"
#include "JsonParseException.h"
#include "JsonPrimitive.h"
#include "JsonSerializationContext.h"
#include "java/lang/Long.h"
#include "java/lang/reflect/Type.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/employee/gson/DateAdaptor.java"


#line 12
@implementation EmpDateAdaptor

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 12
- (instancetype)init {
  EmpDateAdaptor_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 14
- (JavaUtilDate *)deserializeWithGsonJsonElement:(GsonJsonElement *)json
                         withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT
              withGsonJsonDeserializationContext:(id<GsonJsonDeserializationContext>)context {
  
#line 16
  GsonJsonPrimitive *jsonPrimitive = [((GsonJsonElement *) nil_chk(json)) getAsJsonPrimitive];
  
#line 18
  if ([((GsonJsonPrimitive *) nil_chk(jsonPrimitive)) isNumber]) {
    return new_JavaUtilDate_initWithLong_([((GsonJsonPrimitive *) nil_chk([json getAsJsonPrimitive])) getAsLong]);
  }
  JavaTextDateFormat *format = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(@"yyyy-MM-dd'T'HH:mm:ssZ", JreLoadStatic(JavaUtilLocale, ENGLISH));
  @try {
    JavaUtilDate *date = [format parseWithNSString:[jsonPrimitive getAsString]];
    return date;
  }
  @catch (
#line 25
  JavaTextParseException *e) {
    [e printStackTrace];
    @throw new_GsonJsonParseException_initWithNSString_(JreStrcat("$$", @"Unable to parse string to date ", [jsonPrimitive getAsString]));
  }
}


#line 31
- (GsonJsonElement *)serializeWithId:(JavaUtilDate *)src
             withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
    withGsonJsonSerializationContext:(id<GsonJsonSerializationContext>)context {
  
#line 33
  return new_GsonJsonPrimitive_initWithNSNumber_(JavaLangLong_valueOfWithLong_([((JavaUtilDate *) nil_chk(src)) getTime]));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(deserializeWithGsonJsonElement:withJavaLangReflectType:withGsonJsonDeserializationContext:);
  methods[2].selector = @selector(serializeWithId:withJavaLangReflectType:withGsonJsonSerializationContext:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "deserialize", "LGsonJsonElement;LJavaLangReflectType;LGsonJsonDeserializationContext;", "LGsonJsonParseException;", "serialize", "LJavaUtilDate;LJavaLangReflectType;LGsonJsonSerializationContext;", "Ljava/lang/Object;Lcom/google/gson/JsonDeserializer<Ljava/util/Date;>;Lcom/google/gson/JsonSerializer<Ljava/util/Date;>;" };
  static const J2ObjcClassInfo _EmpDateAdaptor = { "DateAdaptor", "com.employee.gson", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, -1, -1, 5, -1 };
  return &_EmpDateAdaptor;
}

@end


#line 12
void EmpDateAdaptor_init(EmpDateAdaptor *self) {
  NSObject_init(self);
}


#line 12
EmpDateAdaptor *new_EmpDateAdaptor_init() {
  J2OBJC_NEW_IMPL(EmpDateAdaptor, init)
}


#line 12
EmpDateAdaptor *create_EmpDateAdaptor_init() {
  J2OBJC_CREATE_IMPL(EmpDateAdaptor, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EmpDateAdaptor)

J2OBJC_NAME_MAPPING(EmpDateAdaptor, "com.employee.gson", "Emp")
