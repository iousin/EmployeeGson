//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/JsonElement.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonElement")
#ifdef RESTRICT_JsonElement
#define INCLUDE_ALL_JsonElement 0
#else
#define INCLUDE_ALL_JsonElement 1
#endif
#undef RESTRICT_JsonElement

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GsonJsonElement_) && (INCLUDE_ALL_JsonElement || defined(INCLUDE_GsonJsonElement))
#define GsonJsonElement_

@class GsonJsonArray;
@class GsonJsonNull;
@class GsonJsonObject;
@class GsonJsonPrimitive;
@class JavaLangBoolean;
@class JavaMathBigDecimal;
@class JavaMathBigInteger;

/*!
 @brief A class representing an element of Json.It could either be a <code>JsonObject</code>, a 
 <code>JsonArray</code>, a <code>JsonPrimitive</code> or a <code>JsonNull</code>.
 @author Inderjeet Singh
 @author Joel Leitch
 */
@interface GsonJsonElement : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief convenience method to get this element as a <code>BigDecimal</code>.
 @return get this element as a <code>BigDecimal</code>.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code>.
  * @@throws NumberFormatException if the element is not a valid <code>BigDecimal</code>.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 @since 1.2
 */
- (JavaMathBigDecimal *)getAsBigDecimal;

/*!
 @brief convenience method to get this element as a <code>BigInteger</code>.
 @return get this element as a <code>BigInteger</code>.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code>.
 @throw NumberFormatExceptionif the element is not a valid <code>BigInteger</code>.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 @since 1.2
 */
- (JavaMathBigInteger *)getAsBigInteger;

/*!
 @brief convenience method to get this element as a boolean value.
 @return get this element as a primitive boolean value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  boolean value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (jboolean)getAsBoolean;

/*!
 @brief convenience method to get this element as a primitive byte value.
 @return get this element as a primitive byte value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  byte value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 @since 1.3
 */
- (jbyte)getAsByte;

/*!
 @brief convenience method to get this element as a primitive character value.
 @return get this element as a primitive char value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  char value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 @since 1.3
 */
- (jchar)getAsCharacter;

/*!
 @brief convenience method to get this element as a primitive double value.
 @return get this element as a primitive double value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  double value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (jdouble)getAsDouble;

/*!
 @brief convenience method to get this element as a primitive float value.
 @return get this element as a primitive float value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  float value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (jfloat)getAsFloat;

/*!
 @brief convenience method to get this element as a primitive integer value.
 @return get this element as a primitive integer value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  integer value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (jint)getAsInt;

/*!
 @brief convenience method to get this element as a <code>JsonArray</code>.If the element is of some
  other type, a <code>IllegalStateException</code> will result.
 Hence it is best to use this method
  after ensuring that this element is of the desired type by calling <code>isJsonArray()</code>
  first.
 @return get this element as a <code>JsonArray</code>.
 @throw IllegalStateExceptionif the element is of another type.
 */
- (GsonJsonArray *)getAsJsonArray;

/*!
 @brief convenience method to get this element as a <code>JsonNull</code>.If the element is of some
  other type, a <code>IllegalStateException</code> will result.
 Hence it is best to use this method
  after ensuring that this element is of the desired type by calling <code>isJsonNull()</code>
  first.
 @return get this element as a <code>JsonNull</code>.
 @throw IllegalStateExceptionif the element is of another type.
 @since 1.2
 */
- (GsonJsonNull *)getAsJsonNull;

/*!
 @brief convenience method to get this element as a <code>JsonObject</code>.If the element is of some
  other type, a <code>IllegalStateException</code> will result.
 Hence it is best to use this method
  after ensuring that this element is of the desired type by calling <code>isJsonObject()</code>
  first.
 @return get this element as a <code>JsonObject</code>.
 @throw IllegalStateExceptionif the element is of another type.
 */
- (GsonJsonObject *)getAsJsonObject;

/*!
 @brief convenience method to get this element as a <code>JsonPrimitive</code>.If the element is of some
  other type, a <code>IllegalStateException</code> will result.
 Hence it is best to use this method
  after ensuring that this element is of the desired type by calling <code>isJsonPrimitive()</code>
  first.
 @return get this element as a <code>JsonPrimitive</code>.
 @throw IllegalStateExceptionif the element is of another type.
 */
- (GsonJsonPrimitive *)getAsJsonPrimitive;

/*!
 @brief convenience method to get this element as a primitive long value.
 @return get this element as a primitive long value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  long value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (jlong)getAsLong;

/*!
 @brief convenience method to get this element as a <code>Number</code>.
 @return get this element as a <code>Number</code>.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  number.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (NSNumber *)getAsNumber;

/*!
 @brief convenience method to get this element as a primitive short value.
 @return get this element as a primitive short value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  short value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (jshort)getAsShort;

/*!
 @brief convenience method to get this element as a string value.
 @return get this element as a string value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  string value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (NSString *)getAsString;

/*!
 @brief provides check for verifying if this element is an array or not.
 @return true if this element is of type <code>JsonArray</code>, false otherwise.
 */
- (jboolean)isJsonArray;

/*!
 @brief provides check for verifying if this element represents a null value or not.
 @return true if this element is of type <code>JsonNull</code>, false otherwise.
 @since 1.2
 */
- (jboolean)isJsonNull;

/*!
 @brief provides check for verifying if this element is a Json object or not.
 @return true if this element is of type <code>JsonObject</code>, false otherwise.
 */
- (jboolean)isJsonObject;

/*!
 @brief provides check for verifying if this element is a primitive or not.
 @return true if this element is of type <code>JsonPrimitive</code>, false otherwise.
 */
- (jboolean)isJsonPrimitive;

/*!
 @brief Returns a String representation of this element.
 */
- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Returns a deep copy of this element.Immutable elements like primitives
  and nulls are not copied.
 */
- (GsonJsonElement *)deepCopy;

/*!
 @brief convenience method to get this element as a <code>Boolean</code> value.
 @return get this element as a <code>Boolean</code> value.
 @throw ClassCastExceptionif the element is of not a <code>JsonPrimitive</code> and is not a valid
  boolean value.
 @throw IllegalStateExceptionif the element is of the type <code>JsonArray</code> but contains
  more than a single element.
 */
- (JavaLangBoolean *)getAsBooleanWrapper;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonJsonElement)

FOUNDATION_EXPORT void GsonJsonElement_init(GsonJsonElement *self);

J2OBJC_TYPE_LITERAL_HEADER(GsonJsonElement)

@compatibility_alias ComGoogleGsonJsonElement GsonJsonElement;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JsonElement")
