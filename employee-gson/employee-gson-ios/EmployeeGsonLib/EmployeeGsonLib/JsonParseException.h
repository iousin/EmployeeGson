//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/JsonParseException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonParseException")
#ifdef RESTRICT_JsonParseException
#define INCLUDE_ALL_JsonParseException 0
#else
#define INCLUDE_ALL_JsonParseException 1
#endif
#undef RESTRICT_JsonParseException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GsonJsonParseException_) && (INCLUDE_ALL_JsonParseException || defined(INCLUDE_GsonJsonParseException))
#define GsonJsonParseException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangThrowable;

/*!
 @brief This exception is raised if there is a serious issue that occurs during parsing of a Json
  string.One of the main usages for this class is for the Gson infrastructure.
 If the incoming
  Json is bad/malicious, an instance of this exception is raised. 
 <p>This exception is a <code>RuntimeException</code> because it is exposed to the client.  Using a 
 <code>RuntimeException</code> avoids bad coding practices on the client side where they catch the
  exception and do nothing.  It is often the case that you want to blow up if there is a parsing
  error (i.e. often clients do not know how to recover from a <code>JsonParseException</code>.</p>
 @author Inderjeet Singh
 @author Joel Leitch
 */
@interface GsonJsonParseException : JavaLangRuntimeException

+ (jlong)serialVersionUID;

#pragma mark Public

/*!
 @brief Creates exception with the specified message.If you are wrapping another exception, consider
  using <code>Throwable)</code> instead.
 @param msg error message describing a possible cause of this exception.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg;

/*!
 @brief Creates exception with the specified message and cause.
 @param msg error message describing what happened.
 @param cause root exception that caused this exception to be thrown.
 */
- (instancetype __nonnull)initWithNSString:(NSString *)msg
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Creates exception with the specified cause.Consider using 
 <code>Throwable)</code> instead if you can describe what happened.
 @param cause root exception that caused this exception to be thrown.
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
                     withJavaLangThrowable:(JavaLangThrowable *)arg1
                               withBoolean:(jboolean)arg2
                               withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonJsonParseException)

inline jlong GsonJsonParseException_get_serialVersionUID(void);
#define GsonJsonParseException_serialVersionUID -4086729973971783390LL
J2OBJC_STATIC_FIELD_CONSTANT(GsonJsonParseException, serialVersionUID, jlong)

FOUNDATION_EXPORT void GsonJsonParseException_initWithNSString_(GsonJsonParseException *self, NSString *msg);

FOUNDATION_EXPORT GsonJsonParseException *new_GsonJsonParseException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonParseException *create_GsonJsonParseException_initWithNSString_(NSString *msg);

FOUNDATION_EXPORT void GsonJsonParseException_initWithNSString_withJavaLangThrowable_(GsonJsonParseException *self, NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT GsonJsonParseException *new_GsonJsonParseException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonParseException *create_GsonJsonParseException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT void GsonJsonParseException_initWithJavaLangThrowable_(GsonJsonParseException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT GsonJsonParseException *new_GsonJsonParseException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonParseException *create_GsonJsonParseException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(GsonJsonParseException)

@compatibility_alias ComGoogleGsonJsonParseException GsonJsonParseException;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JsonParseException")
