//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java
//

#include "DateTypeAdapter.h"
#include "Gson.h"
#include "IOSClass.h"
#include "ISO8601Utils.h"
#include "J2ObjC_source.h"
#include "JsonReader.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "JsonWriter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeToken.h"
#include "java/text/DateFormat.h"
#include "java/text/ParseException.h"
#include "java/text/ParsePosition.h"
#include "java/util/Date.h"
#include "java/util/Locale.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface GsonDateTypeAdapter () {
 @public
  JavaTextDateFormat *enUsFormat_;
  JavaTextDateFormat *localFormat_;
}

- (JavaUtilDate *)deserializeToDateWithNSString:(NSString *)json;

@end

J2OBJC_FIELD_SETTER(GsonDateTypeAdapter, enUsFormat_, JavaTextDateFormat *)
J2OBJC_FIELD_SETTER(GsonDateTypeAdapter, localFormat_, JavaTextDateFormat *)

__attribute__((unused)) static JavaUtilDate *GsonDateTypeAdapter_deserializeToDateWithNSString_(GsonDateTypeAdapter *self, NSString *json);

@interface GsonDateTypeAdapter_1 : NSObject < GsonTypeAdapterFactory >

- (instancetype)init;

- (GsonTypeAdapter *)createWithGsonGson:(GsonGson *)gson
                      withGsonTypeToken:(GsonTypeToken *)typeToken;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonDateTypeAdapter_1)

__attribute__((unused)) static void GsonDateTypeAdapter_1_init(GsonDateTypeAdapter_1 *self);

__attribute__((unused)) static GsonDateTypeAdapter_1 *new_GsonDateTypeAdapter_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonDateTypeAdapter_1 *create_GsonDateTypeAdapter_1_init(void);

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java"

J2OBJC_INITIALIZED_DEFN(GsonDateTypeAdapter)

id<GsonTypeAdapterFactory> GsonDateTypeAdapter_FACTORY;


#line 41
@implementation GsonDateTypeAdapter

+ (id<GsonTypeAdapterFactory>)FACTORY {
  return GsonDateTypeAdapter_FACTORY;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 41
- (instancetype)init {
  GsonDateTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 54
- (JavaUtilDate *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return GsonDateTypeAdapter_deserializeToDateWithNSString_(self, [inArg nextString]);
}

- (JavaUtilDate *)deserializeToDateWithNSString:(NSString *)json {
  return GsonDateTypeAdapter_deserializeToDateWithNSString_(self, json);
}


#line 78
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(JavaUtilDate *)value {
  @synchronized(self) {
    
#line 79
    if (value == nil) {
      (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
      return;
    }
    NSString *dateFormatAsString = [((JavaTextDateFormat *) nil_chk(enUsFormat_)) formatWithJavaUtilDate:value];
    (void) [((GsonJsonWriter *) nil_chk(outArg)) valueWithNSString:dateFormatAsString];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilDate;", 0x22, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(deserializeToDateWithNSString:);
  methods[3].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FACTORY", "LGsonTypeAdapterFactory;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "enUsFormat_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "localFormat_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "read", "LGsonJsonReader;", "LJavaIoIOException;", "deserializeToDate", "LNSString;", "write", "LGsonJsonWriter;LJavaUtilDate;", &GsonDateTypeAdapter_FACTORY, "Lcom/google/gson/TypeAdapter<Ljava/util/Date;>;" };
  static const J2ObjcClassInfo _GsonDateTypeAdapter = { "DateTypeAdapter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 4, 3, -1, -1, -1, 8, -1 };
  return &_GsonDateTypeAdapter;
}

+ (void)initialize {
  if (self == [GsonDateTypeAdapter class]) {
    GsonDateTypeAdapter_FACTORY = new_GsonDateTypeAdapter_1_init();
    J2OBJC_SET_INITIALIZED(GsonDateTypeAdapter)
  }
}

@end


#line 41
void GsonDateTypeAdapter_init(GsonDateTypeAdapter *self) {
  GsonTypeAdapter_init(self);
  self->enUsFormat_ = JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_withJavaUtilLocale_(
#line 50
  JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT, JreLoadStatic(JavaUtilLocale, US));
  self->localFormat_ = JavaTextDateFormat_getDateTimeInstanceWithInt_withInt_(
#line 52
  JavaTextDateFormat_DEFAULT, JavaTextDateFormat_DEFAULT);
}


#line 41
GsonDateTypeAdapter *new_GsonDateTypeAdapter_init() {
  J2OBJC_NEW_IMPL(GsonDateTypeAdapter, init)
}


#line 41
GsonDateTypeAdapter *create_GsonDateTypeAdapter_init() {
  J2OBJC_CREATE_IMPL(GsonDateTypeAdapter, init)
}


#line 62
JavaUtilDate *GsonDateTypeAdapter_deserializeToDateWithNSString_(GsonDateTypeAdapter *self, NSString *json) {
  @synchronized(self) {
    
#line 63
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->localFormat_)) parseWithNSString:json];
    }
    @catch (
#line 65
    JavaTextParseException *ignored) {
    }
    @try {
      return [((JavaTextDateFormat *) nil_chk(self->enUsFormat_)) parseWithNSString:json];
    }
    @catch (
#line 69
    JavaTextParseException *ignored) {
    }
    @try {
      return GsonISO8601Utils_parseWithNSString_withJavaTextParsePosition_(json, new_JavaTextParsePosition_initWithInt_(0));
    }
    @catch (
#line 73
    JavaTextParseException *e) {
      @throw new_GsonJsonSyntaxException_initWithNSString_withJavaLangThrowable_(json, e);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonDateTypeAdapter)

J2OBJC_NAME_MAPPING(GsonDateTypeAdapter, "com.google.gson.internal.bind", "Gson")

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/internal/bind/DateTypeAdapter.java"


#line 42
@implementation GsonDateTypeAdapter_1

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 42
- (instancetype)init {
  GsonDateTypeAdapter_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 43
- (GsonTypeAdapter *)createWithGsonGson:(GsonGson *)gson
                      withGsonTypeToken:(GsonTypeToken *)typeToken {
  
#line 45
  return [((GsonTypeToken *) nil_chk(typeToken)) getRawType] == JavaUtilDate_class_() ? new_GsonDateTypeAdapter_init() : nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createWithGsonGson:withGsonTypeToken:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LGsonGson;LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LGsonDateTypeAdapter;" };
  static const J2ObjcClassInfo _GsonDateTypeAdapter_1 = { "", "com.google.gson.internal.bind", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 3, -1, -1, -1, -1 };
  return &_GsonDateTypeAdapter_1;
}

@end


#line 42
void GsonDateTypeAdapter_1_init(GsonDateTypeAdapter_1 *self) {
  NSObject_init(self);
}


#line 42
GsonDateTypeAdapter_1 *new_GsonDateTypeAdapter_1_init() {
  J2OBJC_NEW_IMPL(GsonDateTypeAdapter_1, init)
}


#line 42
GsonDateTypeAdapter_1 *create_GsonDateTypeAdapter_1_init() {
  J2OBJC_CREATE_IMPL(GsonDateTypeAdapter_1, init)
}
