//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TreeTypeAdapter")
#ifdef RESTRICT_TreeTypeAdapter
#define INCLUDE_ALL_TreeTypeAdapter 0
#else
#define INCLUDE_ALL_TreeTypeAdapter 1
#endif
#undef RESTRICT_TreeTypeAdapter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GsonTreeTypeAdapter_) && (INCLUDE_ALL_TreeTypeAdapter || defined(INCLUDE_GsonTreeTypeAdapter))
#define GsonTreeTypeAdapter_

#define RESTRICT_TypeAdapter 1
#define INCLUDE_GsonTypeAdapter 1
#include "TypeAdapter.h"

@class GsonGson;
@class GsonJsonReader;
@class GsonJsonWriter;
@class GsonTypeToken;
@class IOSClass;
@protocol GsonJsonDeserializer;
@protocol GsonJsonSerializer;
@protocol GsonTypeAdapterFactory;

/*!
 @brief Adapts a Gson 1.x tree-style adapter as a streaming TypeAdapter.Since the
  tree adapter may be serialization-only or deserialization-only, this class
  has a facility to lookup a delegate type adapter on demand.
 */
@interface GsonTreeTypeAdapter : GsonTypeAdapter

#pragma mark Public

- (instancetype __nonnull)initWithGsonJsonSerializer:(id<GsonJsonSerializer>)serializer
                            withGsonJsonDeserializer:(id<GsonJsonDeserializer>)deserializer
                                        withGsonGson:(GsonGson *)gson
                                   withGsonTypeToken:(GsonTypeToken *)typeToken
                          withGsonTypeAdapterFactory:(id<GsonTypeAdapterFactory>)skipPast;

/*!
 @brief Returns a new factory that will match each type against <code>exactType</code>.
 */
+ (id<GsonTypeAdapterFactory>)newFactoryWithGsonTypeToken:(GsonTypeToken *)exactType
                                                   withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new factory that will match each type and its raw type against 
 <code>exactType</code>.
 */
+ (id<GsonTypeAdapterFactory>)newFactoryWithMatchRawTypeWithGsonTypeToken:(GsonTypeToken *)exactType
                                                                   withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Returns a new factory that will match each type's raw type for assignability
  to <code>hierarchyType</code>.
 */
+ (id<GsonTypeAdapterFactory>)newTypeHierarchyFactoryWithIOSClass:(IOSClass *)hierarchyType
                                                           withId:(id)typeAdapter OBJC_METHOD_FAMILY_NONE;

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonTreeTypeAdapter)

FOUNDATION_EXPORT void GsonTreeTypeAdapter_initWithGsonJsonSerializer_withGsonJsonDeserializer_withGsonGson_withGsonTypeToken_withGsonTypeAdapterFactory_(GsonTreeTypeAdapter *self, id<GsonJsonSerializer> serializer, id<GsonJsonDeserializer> deserializer, GsonGson *gson, GsonTypeToken *typeToken, id<GsonTypeAdapterFactory> skipPast);

FOUNDATION_EXPORT GsonTreeTypeAdapter *new_GsonTreeTypeAdapter_initWithGsonJsonSerializer_withGsonJsonDeserializer_withGsonGson_withGsonTypeToken_withGsonTypeAdapterFactory_(id<GsonJsonSerializer> serializer, id<GsonJsonDeserializer> deserializer, GsonGson *gson, GsonTypeToken *typeToken, id<GsonTypeAdapterFactory> skipPast) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonTreeTypeAdapter *create_GsonTreeTypeAdapter_initWithGsonJsonSerializer_withGsonJsonDeserializer_withGsonGson_withGsonTypeToken_withGsonTypeAdapterFactory_(id<GsonJsonSerializer> serializer, id<GsonJsonDeserializer> deserializer, GsonGson *gson, GsonTypeToken *typeToken, id<GsonTypeAdapterFactory> skipPast);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTreeTypeAdapter_newFactoryWithGsonTypeToken_withId_(GsonTypeToken *exactType, id typeAdapter);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTreeTypeAdapter_newFactoryWithMatchRawTypeWithGsonTypeToken_withId_(GsonTypeToken *exactType, id typeAdapter);

FOUNDATION_EXPORT id<GsonTypeAdapterFactory> GsonTreeTypeAdapter_newTypeHierarchyFactoryWithIOSClass_withId_(IOSClass *hierarchyType, id typeAdapter);

J2OBJC_TYPE_LITERAL_HEADER(GsonTreeTypeAdapter)

@compatibility_alias ComGoogleGsonInternalBindTreeTypeAdapter GsonTreeTypeAdapter;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_TreeTypeAdapter")
