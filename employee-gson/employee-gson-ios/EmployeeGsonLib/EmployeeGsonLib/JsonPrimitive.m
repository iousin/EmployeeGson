//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/JsonPrimitive.java
//

#include "$Gson$Preconditions.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JsonElement.h"
#include "JsonPrimitive.h"
#include "LazilyParsedNumber.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Short.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"

@interface GsonJsonPrimitive () {
 @public
  id value_;
}

+ (jboolean)isPrimitiveOrStringWithId:(id)target;

/*!
 @brief Returns true if the specified number is an integral type
  (Long, Integer, Short, Byte, BigInteger)
 */
+ (jboolean)isIntegralWithGsonJsonPrimitive:(GsonJsonPrimitive *)primitive;

@end

J2OBJC_FIELD_SETTER(GsonJsonPrimitive, value_, id)

inline IOSObjectArray *GsonJsonPrimitive_get_PRIMITIVE_TYPES(void);
static IOSObjectArray *GsonJsonPrimitive_PRIMITIVE_TYPES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonJsonPrimitive, PRIMITIVE_TYPES, IOSObjectArray *)

__attribute__((unused)) static jboolean GsonJsonPrimitive_isPrimitiveOrStringWithId_(id target);

__attribute__((unused)) static jboolean GsonJsonPrimitive_isIntegralWithGsonJsonPrimitive_(GsonJsonPrimitive *primitive);

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/JsonPrimitive.java"

J2OBJC_INITIALIZED_DEFN(GsonJsonPrimitive)


#line 33
@implementation GsonJsonPrimitive


#line 46
- (instancetype)initWithJavaLangBoolean:(JavaLangBoolean *)bool_ {
  GsonJsonPrimitive_initWithJavaLangBoolean_(self, bool_);
  return self;
}


#line 55
- (instancetype)initWithNSNumber:(NSNumber *)number {
  GsonJsonPrimitive_initWithNSNumber_(self, number);
  return self;
}


#line 64
- (instancetype)initWithNSString:(NSString *)string {
  GsonJsonPrimitive_initWithNSString_(self, string);
  return self;
}


#line 74
- (instancetype)initWithJavaLangCharacter:(JavaLangCharacter *)c {
  GsonJsonPrimitive_initWithJavaLangCharacter_(self, c);
  return self;
}


#line 84
- (instancetype)initWithId:(id)primitive {
  GsonJsonPrimitive_initWithId_(self, primitive);
  return self;
}


#line 88
- (GsonJsonPrimitive *)deepCopy {
  
#line 90
  return self;
}


#line 93
- (void)setValueWithId:(id)primitive {
  if ([primitive isKindOfClass:[JavaLangCharacter class]]) {
    
#line 97
    jchar c = [((JavaLangCharacter *) nil_chk(((JavaLangCharacter *) cast_chk(primitive, [JavaLangCharacter class])))) charValue];
    self->value_ = NSString_java_valueOfChar_(c);
  }
  else {
    
#line 100
    Gson_Gson_Preconditions_checkArgumentWithBoolean_([primitive isKindOfClass:[NSNumber class]] || GsonJsonPrimitive_isPrimitiveOrStringWithId_(
#line 101
    primitive));
    self->value_ = primitive;
  }
}


#line 111
- (jboolean)isBoolean {
  return [value_ isKindOfClass:[JavaLangBoolean class]];
}


#line 120
- (JavaLangBoolean *)getAsBooleanWrapper {
  
#line 122
  return (JavaLangBoolean *) cast_chk(value_, [JavaLangBoolean class]);
}


#line 130
- (jboolean)getAsBoolean {
  
#line 132
  if ([self isBoolean]) {
    return [((JavaLangBoolean *) nil_chk([self getAsBooleanWrapper])) booleanValue];
  }
  else {
    return JavaLangBoolean_parseBooleanWithNSString_([self getAsString]);
  }
}


#line 145
- (jboolean)isNumber {
  return [value_ isKindOfClass:[NSNumber class]];
}


#line 155
- (NSNumber *)getAsNumber {
  
#line 157
  return [value_ isKindOfClass:[NSString class]] ? new_GsonLazilyParsedNumber_initWithNSString_((NSString *) cast_chk(value_, [NSString class])) : (NSNumber *) cast_chk(value_, [NSNumber class]);
}


#line 165
- (jboolean)isString {
  return [value_ isKindOfClass:[NSString class]];
}


#line 174
- (NSString *)getAsString {
  
#line 176
  if ([self isNumber]) {
    return [((NSNumber *) nil_chk([self getAsNumber])) description];
  }
  else
#line 178
  if ([self isBoolean]) {
    return [((JavaLangBoolean *) nil_chk([self getAsBooleanWrapper])) description];
  }
  else {
    
#line 181
    return (NSString *) cast_chk(value_, [NSString class]);
  }
}


#line 191
- (jdouble)getAsDouble {
  
#line 193
  return [self isNumber] ? [((NSNumber *) nil_chk([self getAsNumber])) doubleValue] : JavaLangDouble_parseDoubleWithNSString_([self getAsString]);
}


#line 202
- (JavaMathBigDecimal *)getAsBigDecimal {
  
#line 204
  return [value_ isKindOfClass:[JavaMathBigDecimal class]] ? (JavaMathBigDecimal *) cast_chk(value_, [JavaMathBigDecimal class]) : new_JavaMathBigDecimal_initWithNSString_([nil_chk(value_) description]);
}


#line 213
- (JavaMathBigInteger *)getAsBigInteger {
  
#line 215
  return [value_ isKindOfClass:[JavaMathBigInteger class]] ?
#line 216
  (JavaMathBigInteger *) cast_chk(value_, [JavaMathBigInteger class]) : new_JavaMathBigInteger_initWithNSString_([nil_chk(value_) description]);
}


#line 225
- (jfloat)getAsFloat {
  
#line 227
  return [self isNumber] ? [((NSNumber *) nil_chk([self getAsNumber])) floatValue] : JavaLangFloat_parseFloatWithNSString_([self getAsString]);
}


#line 236
- (jlong)getAsLong {
  
#line 238
  return [self isNumber] ? [((NSNumber *) nil_chk([self getAsNumber])) longLongValue] : JavaLangLong_parseLongWithNSString_([self getAsString]);
}


#line 247
- (jshort)getAsShort {
  
#line 249
  return [self isNumber] ? [((NSNumber *) nil_chk([self getAsNumber])) shortValue] : JavaLangShort_parseShortWithNSString_([self getAsString]);
}


#line 258
- (jint)getAsInt {
  
#line 260
  return [self isNumber] ? [((NSNumber *) nil_chk([self getAsNumber])) intValue] : JavaLangInteger_parseIntWithNSString_([self getAsString]);
}


#line 263
- (jbyte)getAsByte {
  
#line 265
  return [self isNumber] ? [((NSNumber *) nil_chk([self getAsNumber])) charValue] : JavaLangByte_parseByteWithNSString_([self getAsString]);
}


#line 268
- (jchar)getAsCharacter {
  
#line 270
  return [((NSString *) nil_chk([self getAsString])) charAtWithInt:0];
}


#line 273
+ (jboolean)isPrimitiveOrStringWithId:(id)target {
  return GsonJsonPrimitive_isPrimitiveOrStringWithId_(target);
}


#line 287
- (NSUInteger)hash {
  
#line 289
  if (value_ == nil) {
    return 31;
  }
  
#line 293
  if (GsonJsonPrimitive_isIntegralWithGsonJsonPrimitive_(self)) {
    jlong value = [((NSNumber *) nil_chk([self getAsNumber])) longLongValue];
    return (jint) (value ^ (JreURShift64(value, 32)));
  }
  if ([value_ isKindOfClass:[NSNumber class]]) {
    jlong value = JavaLangDouble_doubleToLongBitsWithDouble_([((NSNumber *) nil_chk([self getAsNumber])) doubleValue]);
    return (jint) (value ^ (JreURShift64(value, 32)));
  }
  return ((jint) [nil_chk(value_) hash]);
}


#line 304
- (jboolean)isEqual:(id)obj {
  
#line 306
  if (self == obj) {
    return true;
  }
  if (obj == nil || [self java_getClass] != [obj java_getClass]) {
    return false;
  }
  GsonJsonPrimitive *other = (GsonJsonPrimitive *) cast_chk(obj, [GsonJsonPrimitive class]);
  if (value_ == nil) {
    return other->value_ == nil;
  }
  if (GsonJsonPrimitive_isIntegralWithGsonJsonPrimitive_(self) && GsonJsonPrimitive_isIntegralWithGsonJsonPrimitive_(other)) {
    return [((NSNumber *) nil_chk([self getAsNumber])) longLongValue] == [((NSNumber *) nil_chk([other getAsNumber])) longLongValue];
  }
  if ([value_ isKindOfClass:[NSNumber class]] && [other->value_ isKindOfClass:[NSNumber class]]) {
    jdouble a = [((NSNumber *) nil_chk([self getAsNumber])) doubleValue];
    
#line 323
    jdouble b = [((NSNumber *) nil_chk([other getAsNumber])) doubleValue];
    return a == b || (JavaLangDouble_isNaNWithDouble_(a) && JavaLangDouble_isNaNWithDouble_(b));
  }
  return [nil_chk(value_) isEqual:other->value_];
}


#line 333
+ (jboolean)isIntegralWithGsonJsonPrimitive:(GsonJsonPrimitive *)primitive {
  return GsonJsonPrimitive_isIntegralWithGsonJsonPrimitive_(primitive);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
    { NULL, "LGsonJsonPrimitive;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigDecimal;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaMathBigInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "S", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "C", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 6, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangBoolean:);
  methods[1].selector = @selector(initWithNSNumber:);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithJavaLangCharacter:);
  methods[4].selector = @selector(initWithId:);
  methods[5].selector = @selector(deepCopy);
  methods[6].selector = @selector(setValueWithId:);
  methods[7].selector = @selector(isBoolean);
  methods[8].selector = @selector(getAsBooleanWrapper);
  methods[9].selector = @selector(getAsBoolean);
  methods[10].selector = @selector(isNumber);
  methods[11].selector = @selector(getAsNumber);
  methods[12].selector = @selector(isString);
  methods[13].selector = @selector(getAsString);
  methods[14].selector = @selector(getAsDouble);
  methods[15].selector = @selector(getAsBigDecimal);
  methods[16].selector = @selector(getAsBigInteger);
  methods[17].selector = @selector(getAsFloat);
  methods[18].selector = @selector(getAsLong);
  methods[19].selector = @selector(getAsShort);
  methods[20].selector = @selector(getAsInt);
  methods[21].selector = @selector(getAsByte);
  methods[22].selector = @selector(getAsCharacter);
  methods[23].selector = @selector(isPrimitiveOrStringWithId:);
  methods[24].selector = @selector(hash);
  methods[25].selector = @selector(isEqual:);
  methods[26].selector = @selector(isIntegralWithGsonJsonPrimitive:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRIMITIVE_TYPES", "[LIOSClass;", .constantValue.asLong = 0, 0x1a, -1, 11, 12, -1 },
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangBoolean;", "LNSNumber;", "LNSString;", "LJavaLangCharacter;", "LNSObject;", "setValue", "isPrimitiveOrString", "hashCode", "equals", "isIntegral", "LGsonJsonPrimitive;", &GsonJsonPrimitive_PRIMITIVE_TYPES, "[Ljava/lang/Class<*>;" };
  static const J2ObjcClassInfo _GsonJsonPrimitive = { "JsonPrimitive", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 27, 2, -1, -1, -1, -1, -1 };
  return &_GsonJsonPrimitive;
}

+ (void)initialize {
  if (self == [GsonJsonPrimitive class]) {
    GsonJsonPrimitive_PRIMITIVE_TYPES = [IOSObjectArray newArrayWithObjects:(id[]){
#line 35
      [IOSClass intClass], [IOSClass longClass], [IOSClass shortClass],
#line 36
      [IOSClass floatClass], [IOSClass doubleClass], [IOSClass byteClass], [IOSClass booleanClass], [IOSClass charClass], JavaLangInteger_class_(), JavaLangLong_class_(),
#line 37
      JavaLangShort_class_(), JavaLangFloat_class_(), JavaLangDouble_class_(), JavaLangByte_class_(), JavaLangBoolean_class_(), JavaLangCharacter_class_() } count:16 type:IOSClass_class_()];
      J2OBJC_SET_INITIALIZED(GsonJsonPrimitive)
    }
  }

@end


#line 46
void GsonJsonPrimitive_initWithJavaLangBoolean_(GsonJsonPrimitive *self, JavaLangBoolean *bool_) {
  GsonJsonElement_init(self);
  
#line 47
  [self setValueWithId:bool_];
}


#line 46
GsonJsonPrimitive *new_GsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean *bool_) {
  J2OBJC_NEW_IMPL(GsonJsonPrimitive, initWithJavaLangBoolean_, bool_)
}


#line 46
GsonJsonPrimitive *create_GsonJsonPrimitive_initWithJavaLangBoolean_(JavaLangBoolean *bool_) {
  J2OBJC_CREATE_IMPL(GsonJsonPrimitive, initWithJavaLangBoolean_, bool_)
}


#line 55
void GsonJsonPrimitive_initWithNSNumber_(GsonJsonPrimitive *self, NSNumber *number) {
  GsonJsonElement_init(self);
  
#line 56
  [self setValueWithId:number];
}


#line 55
GsonJsonPrimitive *new_GsonJsonPrimitive_initWithNSNumber_(NSNumber *number) {
  J2OBJC_NEW_IMPL(GsonJsonPrimitive, initWithNSNumber_, number)
}


#line 55
GsonJsonPrimitive *create_GsonJsonPrimitive_initWithNSNumber_(NSNumber *number) {
  J2OBJC_CREATE_IMPL(GsonJsonPrimitive, initWithNSNumber_, number)
}


#line 64
void GsonJsonPrimitive_initWithNSString_(GsonJsonPrimitive *self, NSString *string) {
  GsonJsonElement_init(self);
  
#line 65
  [self setValueWithId:string];
}


#line 64
GsonJsonPrimitive *new_GsonJsonPrimitive_initWithNSString_(NSString *string) {
  J2OBJC_NEW_IMPL(GsonJsonPrimitive, initWithNSString_, string)
}


#line 64
GsonJsonPrimitive *create_GsonJsonPrimitive_initWithNSString_(NSString *string) {
  J2OBJC_CREATE_IMPL(GsonJsonPrimitive, initWithNSString_, string)
}


#line 74
void GsonJsonPrimitive_initWithJavaLangCharacter_(GsonJsonPrimitive *self, JavaLangCharacter *c) {
  GsonJsonElement_init(self);
  
#line 75
  [self setValueWithId:c];
}


#line 74
GsonJsonPrimitive *new_GsonJsonPrimitive_initWithJavaLangCharacter_(JavaLangCharacter *c) {
  J2OBJC_NEW_IMPL(GsonJsonPrimitive, initWithJavaLangCharacter_, c)
}


#line 74
GsonJsonPrimitive *create_GsonJsonPrimitive_initWithJavaLangCharacter_(JavaLangCharacter *c) {
  J2OBJC_CREATE_IMPL(GsonJsonPrimitive, initWithJavaLangCharacter_, c)
}


#line 84
void GsonJsonPrimitive_initWithId_(GsonJsonPrimitive *self, id primitive) {
  GsonJsonElement_init(self);
  
#line 85
  [self setValueWithId:primitive];
}


#line 84
GsonJsonPrimitive *new_GsonJsonPrimitive_initWithId_(id primitive) {
  J2OBJC_NEW_IMPL(GsonJsonPrimitive, initWithId_, primitive)
}


#line 84
GsonJsonPrimitive *create_GsonJsonPrimitive_initWithId_(id primitive) {
  J2OBJC_CREATE_IMPL(GsonJsonPrimitive, initWithId_, primitive)
}


#line 273
jboolean GsonJsonPrimitive_isPrimitiveOrStringWithId_(id target) {
  GsonJsonPrimitive_initialize();
  
#line 274
  if ([target isKindOfClass:[NSString class]]) {
    return true;
  }
  
#line 278
  IOSClass *classOfPrimitive = [nil_chk(target) java_getClass];
  {
    IOSObjectArray *a__ =
#line 279
    GsonJsonPrimitive_PRIMITIVE_TYPES;
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *standardPrimitive = *b__++;
      
#line 280
      if ([((IOSClass *) nil_chk(standardPrimitive)) isAssignableFrom:classOfPrimitive]) {
        return true;
      }
    }
  }
  
#line 284
  return false;
}


#line 333
jboolean GsonJsonPrimitive_isIntegralWithGsonJsonPrimitive_(GsonJsonPrimitive *primitive) {
  GsonJsonPrimitive_initialize();
  
#line 334
  if ([((GsonJsonPrimitive *) nil_chk(primitive))->value_ isKindOfClass:[NSNumber class]]) {
    NSNumber *number = (NSNumber *) cast_chk(primitive->value_, [NSNumber class]);
    return [number isKindOfClass:[JavaMathBigInteger class]] || [number isKindOfClass:[JavaLangLong class]] || [number isKindOfClass:[JavaLangInteger class]] ||
#line 337
    [number isKindOfClass:[JavaLangShort class]] || [number isKindOfClass:[JavaLangByte class]];
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonJsonPrimitive)

J2OBJC_NAME_MAPPING(GsonJsonPrimitive, "com.google.gson", "Gson")
