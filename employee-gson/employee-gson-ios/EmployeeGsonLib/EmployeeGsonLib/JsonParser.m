//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/JsonParser.java
//

#include "J2ObjC_source.h"
#include "JsonElement.h"
#include "JsonIOException.h"
#include "JsonParseException.h"
#include "JsonParser.h"
#include "JsonReader.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "MalformedJsonException.h"
#include "Streams.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/OutOfMemoryError.h"
#include "java/lang/StackOverflowError.h"

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/JsonParser.java"


#line 34
@implementation GsonJsonParser

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 34
- (instancetype)init {
  GsonJsonParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 44
- (GsonJsonElement *)parseWithNSString:(NSString *)json {
  return [self parseWithJavaIoReader:new_JavaIoStringReader_initWithNSString_(json)];
}


#line 56
- (GsonJsonElement *)parseWithJavaIoReader:(JavaIoReader *)json {
  @try {
    GsonJsonReader *jsonReader = new_GsonJsonReader_initWithJavaIoReader_(json);
    GsonJsonElement *element = [self parseWithGsonJsonReader:jsonReader];
    if (![((GsonJsonElement *) nil_chk(element)) isJsonNull] && [jsonReader peek] != JreLoadEnum(GsonJsonToken, END_DOCUMENT)) {
      @throw new_GsonJsonSyntaxException_initWithNSString_(@"Did not consume the entire document.");
    }
    return element;
  }
  @catch (
#line 64
  GsonMalformedJsonException *e) {
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (
#line 66
  JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
  @catch (
#line 68
  JavaLangNumberFormatException *e) {
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
}


#line 80
- (GsonJsonElement *)parseWithGsonJsonReader:(GsonJsonReader *)json {
  jboolean lenient = [((GsonJsonReader *) nil_chk(json)) isLenient];
  [json setLenientWithBoolean:true];
  @try {
    return GsonStreams_parseWithGsonJsonReader_(json);
  }
  @catch (
#line 85
  JavaLangStackOverflowError *e) {
    @throw new_GsonJsonParseException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@$", @"Failed parsing JSON source: ", json, @" to Json"), e);
  }
  @catch (
#line 87
  JavaLangOutOfMemoryError *e) {
    @throw new_GsonJsonParseException_initWithNSString_withJavaLangThrowable_(JreStrcat("$@$", @"Failed parsing JSON source: ", json, @" to Json"), e);
  }
  @finally {
    
#line 90
    [json setLenientWithBoolean:lenient];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 0, 3, 4, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 0, 5, 4, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithNSString:);
  methods[2].selector = @selector(parseWithJavaIoReader:);
  methods[3].selector = @selector(parseWithGsonJsonReader:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "parse", "LNSString;", "LGsonJsonSyntaxException;", "LJavaIoReader;", "LGsonJsonIOException;LGsonJsonSyntaxException;", "LGsonJsonReader;" };
  static const J2ObjcClassInfo _GsonJsonParser = { "JsonParser", "com.google.gson", ptrTable, methods, NULL, 7, 0x11, 4, 0, -1, -1, -1, -1, -1 };
  return &_GsonJsonParser;
}

@end


#line 34
void GsonJsonParser_init(GsonJsonParser *self) {
  NSObject_init(self);
}


#line 34
GsonJsonParser *new_GsonJsonParser_init() {
  J2OBJC_NEW_IMPL(GsonJsonParser, init)
}


#line 34
GsonJsonParser *create_GsonJsonParser_init() {
  J2OBJC_CREATE_IMPL(GsonJsonParser, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonJsonParser)

J2OBJC_NAME_MAPPING(GsonJsonParser, "com.google.gson", "Gson")
