//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java
//

#include "$Gson$Types.h"
#include "ConstructorConstructor.h"
#include "Excluder.h"
#include "FieldNamingStrategy.h"
#include "Gson.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JsonAdapter.h"
#include "JsonAdapterAnnotationTypeAdapterFactory.h"
#include "JsonReader.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "JsonWriter.h"
#include "ObjectConstructor.h"
#include "Primitives.h"
#include "ReflectiveTypeAdapterFactory.h"
#include "SerializedName.h"
#include "TypeAdapter.h"
#include "TypeAdapterRuntimeTypeWrapper.h"
#include "TypeToken.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface GsonReflectiveTypeAdapterFactory () {
 @public
  GsonConstructorConstructor *constructorConstructor_;
  id<GsonFieldNamingStrategy> fieldNamingPolicy_;
  GsonExcluder *excluder_;
  GsonJsonAdapterAnnotationTypeAdapterFactory *jsonAdapterFactory_;
}

/*!
 @brief first element holds the default name
 */
- (id<JavaUtilList>)getFieldNamesWithJavaLangReflectField:(JavaLangReflectField *)f;

- (GsonReflectiveTypeAdapterFactory_BoundField *)createBoundFieldWithGsonGson:(GsonGson *)context
                                                     withJavaLangReflectField:(JavaLangReflectField *)field
                                                                 withNSString:(NSString *)name
                                                            withGsonTypeToken:(GsonTypeToken *)fieldType
                                                                  withBoolean:(jboolean)serialize
                                                                  withBoolean:(jboolean)deserialize;

- (id<JavaUtilMap>)getBoundFieldsWithGsonGson:(GsonGson *)context
                            withGsonTypeToken:(GsonTypeToken *)type
                                 withIOSClass:(IOSClass *)raw;

@end

J2OBJC_FIELD_SETTER(GsonReflectiveTypeAdapterFactory, constructorConstructor_, GsonConstructorConstructor *)
J2OBJC_FIELD_SETTER(GsonReflectiveTypeAdapterFactory, fieldNamingPolicy_, id<GsonFieldNamingStrategy>)
J2OBJC_FIELD_SETTER(GsonReflectiveTypeAdapterFactory, excluder_, GsonExcluder *)
J2OBJC_FIELD_SETTER(GsonReflectiveTypeAdapterFactory, jsonAdapterFactory_, GsonJsonAdapterAnnotationTypeAdapterFactory *)

__attribute__((unused)) static id<JavaUtilList> GsonReflectiveTypeAdapterFactory_getFieldNamesWithJavaLangReflectField_(GsonReflectiveTypeAdapterFactory *self, JavaLangReflectField *f);

__attribute__((unused)) static GsonReflectiveTypeAdapterFactory_BoundField *GsonReflectiveTypeAdapterFactory_createBoundFieldWithGsonGson_withJavaLangReflectField_withNSString_withGsonTypeToken_withBoolean_withBoolean_(GsonReflectiveTypeAdapterFactory *self, GsonGson *context, JavaLangReflectField *field, NSString *name, GsonTypeToken *fieldType, jboolean serialize, jboolean deserialize);

__attribute__((unused)) static id<JavaUtilMap> GsonReflectiveTypeAdapterFactory_getBoundFieldsWithGsonGson_withGsonTypeToken_withIOSClass_(GsonReflectiveTypeAdapterFactory *self, GsonGson *context, GsonTypeToken *type, IOSClass *raw);

@interface GsonReflectiveTypeAdapterFactory_1 : GsonReflectiveTypeAdapterFactory_BoundField {
 @public
  JavaLangReflectField *val$field_;
  jboolean val$jsonAdapterPresent_;
  GsonTypeAdapter *val$typeAdapter_;
  GsonGson *val$context_;
  GsonTypeToken *val$fieldType_;
  jboolean val$isPrimitive_;
}

- (instancetype)initWithJavaLangReflectField:(JavaLangReflectField *)capture$0
                                 withBoolean:(jboolean)capture$1
                         withGsonTypeAdapter:(GsonTypeAdapter *)capture$2
                                withGsonGson:(GsonGson *)capture$3
                           withGsonTypeToken:(GsonTypeToken *)capture$4
                                 withBoolean:(jboolean)capture$5
                                withNSString:(NSString *)name
                                 withBoolean:(jboolean)serialized
                                 withBoolean:(jboolean)deserialized;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)writer
                         withId:(id)value;

- (void)readWithGsonJsonReader:(GsonJsonReader *)reader
                        withId:(id)value;

- (jboolean)writeFieldWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonReflectiveTypeAdapterFactory_1)

__attribute__((unused)) static void GsonReflectiveTypeAdapterFactory_1_initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_(GsonReflectiveTypeAdapterFactory_1 *self, JavaLangReflectField *capture$0, jboolean capture$1, GsonTypeAdapter *capture$2, GsonGson *capture$3, GsonTypeToken *capture$4, jboolean capture$5, NSString *name, jboolean serialized, jboolean deserialized);

__attribute__((unused)) static GsonReflectiveTypeAdapterFactory_1 *new_GsonReflectiveTypeAdapterFactory_1_initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_(JavaLangReflectField *capture$0, jboolean capture$1, GsonTypeAdapter *capture$2, GsonGson *capture$3, GsonTypeToken *capture$4, jboolean capture$5, NSString *name, jboolean serialized, jboolean deserialized) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonReflectiveTypeAdapterFactory_1 *create_GsonReflectiveTypeAdapterFactory_1_initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_(JavaLangReflectField *capture$0, jboolean capture$1, GsonTypeAdapter *capture$2, GsonGson *capture$3, GsonTypeToken *capture$4, jboolean capture$5, NSString *name, jboolean serialized, jboolean deserialized);

@interface GsonReflectiveTypeAdapterFactory_Adapter () {
 @public
  id<GsonObjectConstructor> constructor_;
  id<JavaUtilMap> boundFields_;
}

@end

J2OBJC_FIELD_SETTER(GsonReflectiveTypeAdapterFactory_Adapter, constructor_, id<GsonObjectConstructor>)
J2OBJC_FIELD_SETTER(GsonReflectiveTypeAdapterFactory_Adapter, boundFields_, id<JavaUtilMap>)

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"


#line 47
@implementation GsonReflectiveTypeAdapterFactory


#line 53
- (instancetype)initWithGsonConstructorConstructor:(GsonConstructorConstructor *)constructorConstructor
                       withGsonFieldNamingStrategy:(id<GsonFieldNamingStrategy>)fieldNamingPolicy
                                  withGsonExcluder:(GsonExcluder *)excluder
   withGsonJsonAdapterAnnotationTypeAdapterFactory:(GsonJsonAdapterAnnotationTypeAdapterFactory *)jsonAdapterFactory {
  GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_withGsonJsonAdapterAnnotationTypeAdapterFactory_(self, constructorConstructor, fieldNamingPolicy, excluder, jsonAdapterFactory);
  return self;
}


#line 62
- (jboolean)excludeFieldWithJavaLangReflectField:(JavaLangReflectField *)f
                                     withBoolean:(jboolean)serialize {
  return GsonReflectiveTypeAdapterFactory_excludeFieldWithJavaLangReflectField_withBoolean_withGsonExcluder_(f, serialize, excluder_);
}


#line 66
+ (jboolean)excludeFieldWithJavaLangReflectField:(JavaLangReflectField *)f
                                     withBoolean:(jboolean)serialize
                                withGsonExcluder:(GsonExcluder *)excluder {
  return GsonReflectiveTypeAdapterFactory_excludeFieldWithJavaLangReflectField_withBoolean_withGsonExcluder_(f, serialize, excluder);
}


#line 71
- (id<JavaUtilList>)getFieldNamesWithJavaLangReflectField:(JavaLangReflectField *)f {
  return GsonReflectiveTypeAdapterFactory_getFieldNamesWithJavaLangReflectField_(self, f);
}


#line 92
- (GsonTypeAdapter *)createWithGsonGson:(GsonGson *)gson
                      withGsonTypeToken:(GsonTypeToken *)type {
  IOSClass *raw = [((GsonTypeToken *) nil_chk(type)) getRawType];
  
#line 95
  if (![NSObject_class_() isAssignableFrom:raw]) {
    return nil;
  }
  
#line 99
  id<GsonObjectConstructor> constructor = [((GsonConstructorConstructor *) nil_chk(constructorConstructor_)) getWithGsonTypeToken:type];
  return new_GsonReflectiveTypeAdapterFactory_Adapter_initWithGsonObjectConstructor_withJavaUtilMap_(constructor, GsonReflectiveTypeAdapterFactory_getBoundFieldsWithGsonGson_withGsonTypeToken_withIOSClass_(self, gson, type, raw));
}


#line 103
- (GsonReflectiveTypeAdapterFactory_BoundField *)createBoundFieldWithGsonGson:(GsonGson *)context
                                                     withJavaLangReflectField:(JavaLangReflectField *)field
                                                                 withNSString:(NSString *)name
                                                            withGsonTypeToken:(GsonTypeToken *)fieldType
                                                                  withBoolean:(jboolean)serialize
                                                                  withBoolean:(jboolean)deserialize {
  return GsonReflectiveTypeAdapterFactory_createBoundFieldWithGsonGson_withJavaLangReflectField_withNSString_withGsonTypeToken_withBoolean_withBoolean_(self, context, field, name, fieldType, serialize, deserialize);
}


#line 142
- (id<JavaUtilMap>)getBoundFieldsWithGsonGson:(GsonGson *)context
                            withGsonTypeToken:(GsonTypeToken *)type
                                 withIOSClass:(IOSClass *)raw {
  return GsonReflectiveTypeAdapterFactory_getBoundFieldsWithGsonGson_withGsonTypeToken_withIOSClass_(self, context, type, raw);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 1, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LGsonReflectiveTypeAdapterFactory_BoundField;", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 13, 14, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithGsonConstructorConstructor:withGsonFieldNamingStrategy:withGsonExcluder:withGsonJsonAdapterAnnotationTypeAdapterFactory:);
  methods[1].selector = @selector(excludeFieldWithJavaLangReflectField:withBoolean:);
  methods[2].selector = @selector(excludeFieldWithJavaLangReflectField:withBoolean:withGsonExcluder:);
  methods[3].selector = @selector(getFieldNamesWithJavaLangReflectField:);
  methods[4].selector = @selector(createWithGsonGson:withGsonTypeToken:);
  methods[5].selector = @selector(createBoundFieldWithGsonGson:withJavaLangReflectField:withNSString:withGsonTypeToken:withBoolean:withBoolean:);
  methods[6].selector = @selector(getBoundFieldsWithGsonGson:withGsonTypeToken:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "constructorConstructor_", "LGsonConstructorConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fieldNamingPolicy_", "LGsonFieldNamingStrategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "excluder_", "LGsonExcluder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jsonAdapterFactory_", "LGsonJsonAdapterAnnotationTypeAdapterFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGsonConstructorConstructor;LGsonFieldNamingStrategy;LGsonExcluder;LGsonJsonAdapterAnnotationTypeAdapterFactory;", "excludeField", "LJavaLangReflectField;Z", "LJavaLangReflectField;ZLGsonExcluder;", "getFieldNames", "LJavaLangReflectField;", "(Ljava/lang/reflect/Field;)Ljava/util/List<Ljava/lang/String;>;", "create", "LGsonGson;LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "createBoundField", "LGsonGson;LJavaLangReflectField;LNSString;LGsonTypeToken;ZZ", "(Lcom/google/gson/Gson;Ljava/lang/reflect/Field;Ljava/lang/String;Lcom/google/gson/reflect/TypeToken<*>;ZZ)Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;", "getBoundFields", "LGsonGson;LGsonTypeToken;LIOSClass;", "(Lcom/google/gson/Gson;Lcom/google/gson/reflect/TypeToken<*>;Ljava/lang/Class<*>;)Ljava/util/Map<Ljava/lang/String;Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;>;", "LGsonReflectiveTypeAdapterFactory_BoundField;LGsonReflectiveTypeAdapterFactory_Adapter;" };
  static const J2ObjcClassInfo _GsonReflectiveTypeAdapterFactory = { "ReflectiveTypeAdapterFactory", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x11, 7, 4, -1, 16, -1, -1, -1 };
  return &_GsonReflectiveTypeAdapterFactory;
}

@end


#line 53
void GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_withGsonJsonAdapterAnnotationTypeAdapterFactory_(GsonReflectiveTypeAdapterFactory *self, GsonConstructorConstructor *constructorConstructor, id<GsonFieldNamingStrategy> fieldNamingPolicy, GsonExcluder *excluder, GsonJsonAdapterAnnotationTypeAdapterFactory *jsonAdapterFactory) {
  NSObject_init(self);
  
#line 56
  self->constructorConstructor_ = constructorConstructor;
  self->fieldNamingPolicy_ = fieldNamingPolicy;
  self->excluder_ = excluder;
  self->jsonAdapterFactory_ = jsonAdapterFactory;
}


#line 53
GsonReflectiveTypeAdapterFactory *new_GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_withGsonJsonAdapterAnnotationTypeAdapterFactory_(GsonConstructorConstructor *constructorConstructor, id<GsonFieldNamingStrategy> fieldNamingPolicy, GsonExcluder *excluder, GsonJsonAdapterAnnotationTypeAdapterFactory *jsonAdapterFactory) {
  J2OBJC_NEW_IMPL(GsonReflectiveTypeAdapterFactory, initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_withGsonJsonAdapterAnnotationTypeAdapterFactory_, constructorConstructor, fieldNamingPolicy, excluder, jsonAdapterFactory)
}


#line 53
GsonReflectiveTypeAdapterFactory *create_GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_withGsonJsonAdapterAnnotationTypeAdapterFactory_(GsonConstructorConstructor *constructorConstructor, id<GsonFieldNamingStrategy> fieldNamingPolicy, GsonExcluder *excluder, GsonJsonAdapterAnnotationTypeAdapterFactory *jsonAdapterFactory) {
  J2OBJC_CREATE_IMPL(GsonReflectiveTypeAdapterFactory, initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_withGsonJsonAdapterAnnotationTypeAdapterFactory_, constructorConstructor, fieldNamingPolicy, excluder, jsonAdapterFactory)
}


#line 66
jboolean GsonReflectiveTypeAdapterFactory_excludeFieldWithJavaLangReflectField_withBoolean_withGsonExcluder_(JavaLangReflectField *f, jboolean serialize, GsonExcluder *excluder) {
  GsonReflectiveTypeAdapterFactory_initialize();
  
#line 67
  return ![((GsonExcluder *) nil_chk(excluder)) excludeClassWithIOSClass:[((JavaLangReflectField *) nil_chk(f)) getType] withBoolean:serialize] && ![excluder excludeFieldWithJavaLangReflectField:f withBoolean:serialize];
}


#line 71
id<JavaUtilList> GsonReflectiveTypeAdapterFactory_getFieldNamesWithJavaLangReflectField_(GsonReflectiveTypeAdapterFactory *self, JavaLangReflectField *f) {
  id<GsonSerializedName> annotation = ((id<GsonSerializedName>) [((JavaLangReflectField *) nil_chk(f)) getAnnotationWithIOSClass:GsonSerializedName_class_()]);
  if (annotation == nil) {
    NSString *name = [((id<GsonFieldNamingStrategy>) nil_chk(self->fieldNamingPolicy_)) translateNameWithJavaLangReflectField:f];
    return JavaUtilCollections_singletonListWithId_(name);
  }
  
#line 78
  NSString *serializedName = [annotation value];
  IOSObjectArray *alternates = [annotation alternate];
  if (((IOSObjectArray *) nil_chk(alternates))->size_ == 0) {
    return JavaUtilCollections_singletonListWithId_(serializedName);
  }
  
#line 84
  id<JavaUtilList> fieldNames = new_JavaUtilArrayList_initWithInt_(alternates->size_ + 1);
  [fieldNames addWithId:serializedName];
  {
    IOSObjectArray *a__ =
#line 86
    alternates;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *alternate = *b__++;
      
#line 87
      [fieldNames addWithId:alternate];
    }
  }
  
#line 89
  return fieldNames;
}


#line 103
GsonReflectiveTypeAdapterFactory_BoundField *GsonReflectiveTypeAdapterFactory_createBoundFieldWithGsonGson_withJavaLangReflectField_withNSString_withGsonTypeToken_withBoolean_withBoolean_(GsonReflectiveTypeAdapterFactory *self, GsonGson *context, JavaLangReflectField *field, NSString *name, GsonTypeToken *fieldType, jboolean serialize, jboolean deserialize) {
  
#line 106
  jboolean isPrimitive = GsonPrimitives_isPrimitiveWithJavaLangReflectType_([((GsonTypeToken *) nil_chk(fieldType)) getRawType]);
  
#line 108
  id<GsonJsonAdapter> annotation = ((id<GsonJsonAdapter>) [((JavaLangReflectField *) nil_chk(field)) getAnnotationWithIOSClass:GsonJsonAdapter_class_()]);
  GsonTypeAdapter *mapped = nil;
  if (annotation != nil) {
    mapped = [((GsonJsonAdapterAnnotationTypeAdapterFactory *) nil_chk(self->jsonAdapterFactory_)) getTypeAdapterWithGsonConstructorConstructor:self->constructorConstructor_ withGsonGson:
#line 112
    context withGsonTypeToken:fieldType withGsonJsonAdapter:annotation];
  }
  jboolean jsonAdapterPresent = mapped != nil;
  if (mapped == nil) mapped = [((GsonGson *) nil_chk(context)) getAdapterWithGsonTypeToken:fieldType];
  
#line 117
  GsonTypeAdapter *typeAdapter = mapped;
  return new_GsonReflectiveTypeAdapterFactory_1_initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_(field, jsonAdapterPresent, typeAdapter, context, fieldType, isPrimitive, name, serialize, deserialize);
}


#line 142
id<JavaUtilMap> GsonReflectiveTypeAdapterFactory_getBoundFieldsWithGsonGson_withGsonTypeToken_withIOSClass_(GsonReflectiveTypeAdapterFactory *self, GsonGson *context, GsonTypeToken *type, IOSClass *raw) {
  id<JavaUtilMap> result = new_JavaUtilLinkedHashMap_init();
  if ([((IOSClass *) nil_chk(raw)) isInterface]) {
    return result;
  }
  
#line 148
  id<JavaLangReflectType> declaredType = [((GsonTypeToken *) nil_chk(type)) getType];
  while (raw != NSObject_class_()) {
    IOSObjectArray *fields = [((IOSClass *) nil_chk(raw)) getDeclaredFields];
    {
      IOSObjectArray *a__ =
#line 151
      fields;
      JavaLangReflectField * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectField * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectField *field = *b__++;
        
#line 152
        jboolean serialize = [self excludeFieldWithJavaLangReflectField:field withBoolean:true];
        jboolean deserialize = [self excludeFieldWithJavaLangReflectField:field withBoolean:false];
        if (!serialize && !deserialize) {
          continue;
        }
        [((JavaLangReflectField *) nil_chk(field)) setAccessibleWithBoolean:true];
        id<JavaLangReflectType> fieldType = Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_([type getType], raw, [field getGenericType]);
        id<JavaUtilList> fieldNames = GsonReflectiveTypeAdapterFactory_getFieldNamesWithJavaLangReflectField_(self, field);
        GsonReflectiveTypeAdapterFactory_BoundField *previous = nil;
        for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(fieldNames)) size]; ++i) {
          NSString *name = [fieldNames getWithInt:i];
          if (i != 0) serialize = false;
          GsonReflectiveTypeAdapterFactory_BoundField *boundField = GsonReflectiveTypeAdapterFactory_createBoundFieldWithGsonGson_withJavaLangReflectField_withNSString_withGsonTypeToken_withBoolean_withBoolean_(self, context, field, name, GsonTypeToken_getWithJavaLangReflectType_(
#line 165
          fieldType), serialize, deserialize);
          GsonReflectiveTypeAdapterFactory_BoundField *replaced = [result putWithId:name withId:boundField];
          if (previous == nil) previous = replaced;
        }
        if (previous != nil) {
          @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("@$$", declaredType, @" declares multiple JSON fields named ",
#line 171
          previous->name_));
        }
      }
    }
    
#line 174
    type = GsonTypeToken_getWithJavaLangReflectType_(Gson_Gson_Types_resolveWithJavaLangReflectType_withIOSClass_withJavaLangReflectType_([type getType], raw, [raw getGenericSuperclass]));
    raw = [((GsonTypeToken *) nil_chk(type)) getRawType];
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonReflectiveTypeAdapterFactory)

J2OBJC_NAME_MAPPING(GsonReflectiveTypeAdapterFactory, "com.google.gson.internal.bind", "Gson")

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"


#line 180
@implementation GsonReflectiveTypeAdapterFactory_BoundField


#line 185
- (instancetype)initWithNSString:(NSString *)name
                     withBoolean:(jboolean)serialized
                     withBoolean:(jboolean)deserialized {
  GsonReflectiveTypeAdapterFactory_BoundField_initWithNSString_withBoolean_withBoolean_(self, name, serialized, deserialized);
  return self;
}


#line 190
- (jboolean)writeFieldWithId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}


#line 191
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)writer
                         withId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}


#line 192
- (void)readWithGsonJsonReader:(GsonJsonReader *)reader
                        withId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x400, 4, 5, 3, -1, -1, -1 },
    { NULL, "V", 0x400, 6, 7, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withBoolean:withBoolean:);
  methods[1].selector = @selector(writeFieldWithId:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  methods[3].selector = @selector(readWithGsonJsonReader:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "serialized_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "deserialized_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ZZ", "writeField", "LNSObject;", "LJavaIoIOException;LJavaLangIllegalAccessException;", "write", "LGsonJsonWriter;LNSObject;", "read", "LGsonJsonReader;LNSObject;", "LGsonReflectiveTypeAdapterFactory;" };
  static const J2ObjcClassInfo _GsonReflectiveTypeAdapterFactory_BoundField = { "BoundField", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x408, 4, 3, 8, -1, -1, -1, -1 };
  return &_GsonReflectiveTypeAdapterFactory_BoundField;
}

@end


#line 185
void GsonReflectiveTypeAdapterFactory_BoundField_initWithNSString_withBoolean_withBoolean_(GsonReflectiveTypeAdapterFactory_BoundField *self, NSString *name, jboolean serialized, jboolean deserialized) {
  NSObject_init(self);
  
#line 186
  self->name_ = name;
  self->serialized_ = serialized;
  self->deserialized_ = deserialized;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonReflectiveTypeAdapterFactory_BoundField)

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"


#line 118
@implementation GsonReflectiveTypeAdapterFactory_1


#line 118
- (instancetype)initWithJavaLangReflectField:(JavaLangReflectField *)capture$0
                                 withBoolean:(jboolean)capture$1
                         withGsonTypeAdapter:(GsonTypeAdapter *)capture$2
                                withGsonGson:(GsonGson *)capture$3
                           withGsonTypeToken:(GsonTypeToken *)capture$4
                                 withBoolean:(jboolean)capture$5
                                withNSString:(NSString *)name
                                 withBoolean:(jboolean)serialized
                                 withBoolean:(jboolean)deserialized {
  GsonReflectiveTypeAdapterFactory_1_initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_(self, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5, name, serialized, deserialized);
  return self;
}


#line 119
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)writer
                         withId:(id)value {
  
#line 122
  id fieldValue = [((JavaLangReflectField *) nil_chk(val$field_)) getWithId:value];
  GsonTypeAdapter *t = val$jsonAdapterPresent_ ? val$typeAdapter_ : new_GsonTypeAdapterRuntimeTypeWrapper_initWithGsonGson_withGsonTypeAdapter_withJavaLangReflectType_(val$context_, val$typeAdapter_,
#line 124
  [((GsonTypeToken *) nil_chk(val$fieldType_)) getType]);
  [t writeWithGsonJsonWriter:writer withId:fieldValue];
}


#line 127
- (void)readWithGsonJsonReader:(GsonJsonReader *)reader
                        withId:(id)value {
  
#line 129
  id fieldValue = [((GsonTypeAdapter *) nil_chk(val$typeAdapter_)) readWithGsonJsonReader:reader];
  if (fieldValue != nil || !val$isPrimitive_) {
    [((JavaLangReflectField *) nil_chk(val$field_)) setWithId:value withId:fieldValue];
  }
}


#line 134
- (jboolean)writeFieldWithId:(id)value {
  if (!serialized_) return false;
  id fieldValue = [((JavaLangReflectField *) nil_chk(val$field_)) getWithId:value];
  return fieldValue != value;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, 3, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangReflectField:withBoolean:withGsonTypeAdapter:withGsonGson:withGsonTypeToken:withBoolean:withNSString:withBoolean:withBoolean:);
  methods[1].selector = @selector(writeWithGsonJsonWriter:withId:);
  methods[2].selector = @selector(readWithGsonJsonReader:withId:);
  methods[3].selector = @selector(writeFieldWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$field_", "LJavaLangReflectField;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$jsonAdapterPresent_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$typeAdapter_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x1012, -1, -1, 8, -1 },
    { "val$context_", "LGsonGson;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$fieldType_", "LGsonTypeToken;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
    { "val$isPrimitive_", "Z", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;ZZ", "write", "LGsonJsonWriter;LNSObject;", "LJavaIoIOException;LJavaLangIllegalAccessException;", "read", "LGsonJsonReader;LNSObject;", "writeField", "LNSObject;", "Lcom/google/gson/TypeAdapter<*>;", "Lcom/google/gson/reflect/TypeToken<*>;", "LGsonReflectiveTypeAdapterFactory;", "createBoundFieldWithGsonGson:withJavaLangReflectField:withNSString:withGsonTypeToken:withBoolean:withBoolean:" };
  static const J2ObjcClassInfo _GsonReflectiveTypeAdapterFactory_1 = { "", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x8018, 4, 6, 10, -1, 11, -1, -1 };
  return &_GsonReflectiveTypeAdapterFactory_1;
}

@end


#line 118
void GsonReflectiveTypeAdapterFactory_1_initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_(GsonReflectiveTypeAdapterFactory_1 *self, JavaLangReflectField *capture$0, jboolean capture$1, GsonTypeAdapter *capture$2, GsonGson *capture$3, GsonTypeToken *capture$4, jboolean capture$5, NSString *name, jboolean serialized, jboolean deserialized) {
  self->val$field_ = capture$0;
  self->val$jsonAdapterPresent_ = capture$1;
  self->val$typeAdapter_ = capture$2;
  self->val$context_ = capture$3;
  self->val$fieldType_ = capture$4;
  self->val$isPrimitive_ = capture$5;
  GsonReflectiveTypeAdapterFactory_BoundField_initWithNSString_withBoolean_withBoolean_(self,
#line 118
  name, serialized, deserialized);
}


#line 118
GsonReflectiveTypeAdapterFactory_1 *new_GsonReflectiveTypeAdapterFactory_1_initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_(JavaLangReflectField *capture$0, jboolean capture$1, GsonTypeAdapter *capture$2, GsonGson *capture$3, GsonTypeToken *capture$4, jboolean capture$5, NSString *name, jboolean serialized, jboolean deserialized) {
  J2OBJC_NEW_IMPL(GsonReflectiveTypeAdapterFactory_1, initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5, name, serialized, deserialized)
}


#line 118
GsonReflectiveTypeAdapterFactory_1 *create_GsonReflectiveTypeAdapterFactory_1_initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_(JavaLangReflectField *capture$0, jboolean capture$1, GsonTypeAdapter *capture$2, GsonGson *capture$3, GsonTypeToken *capture$4, jboolean capture$5, NSString *name, jboolean serialized, jboolean deserialized) {
  J2OBJC_CREATE_IMPL(GsonReflectiveTypeAdapterFactory_1, initWithJavaLangReflectField_withBoolean_withGsonTypeAdapter_withGsonGson_withGsonTypeToken_withBoolean_withNSString_withBoolean_withBoolean_, capture$0, capture$1, capture$2, capture$3, capture$4, capture$5, name, serialized, deserialized)
}

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"


#line 195
@implementation GsonReflectiveTypeAdapterFactory_Adapter


#line 199
- (instancetype)initWithGsonObjectConstructor:(id<GsonObjectConstructor>)constructor
                              withJavaUtilMap:(id<JavaUtilMap>)boundFields {
  GsonReflectiveTypeAdapterFactory_Adapter_initWithGsonObjectConstructor_withJavaUtilMap_(self, constructor, boundFields);
  return self;
}


#line 204
- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  
#line 210
  id instance = [((id<GsonObjectConstructor>) nil_chk(constructor_)) construct];
  
#line 212
  @try {
    [inArg beginObject];
    while ([inArg hasNext]) {
      NSString *name = [inArg nextName];
      GsonReflectiveTypeAdapterFactory_BoundField *field = [((id<JavaUtilMap>) nil_chk(boundFields_)) getWithId:name];
      if (field == nil || !field->deserialized_) {
        [inArg skipValue];
      }
      else {
        
#line 220
        [field readWithGsonJsonReader:inArg withId:instance];
      }
    }
  }
  @catch (
#line 223
  JavaLangIllegalStateException *e) {
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (
#line 225
  JavaLangIllegalAccessException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
  [inArg endObject];
  return instance;
}


#line 232
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value {
  if (value == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  
#line 238
  (void) [((GsonJsonWriter *) nil_chk(outArg)) beginObject];
  @try {
    for (GsonReflectiveTypeAdapterFactory_BoundField * __strong boundField in nil_chk([((id<JavaUtilMap>) nil_chk(boundFields_)) values])) {
      if ([((GsonReflectiveTypeAdapterFactory_BoundField *) nil_chk(boundField)) writeFieldWithId:value]) {
        (void) [outArg nameWithNSString:boundField->name_];
        [boundField writeWithGsonJsonWriter:outArg withId:value];
      }
    }
  }
  @catch (
#line 246
  JavaLangIllegalAccessException *e) {
    @throw new_JavaLangAssertionError_initWithId_(e);
  }
  (void) [outArg endObject];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, 4, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 4, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithGsonObjectConstructor:withJavaUtilMap:);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "constructor_", "LGsonObjectConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "boundFields_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LGsonObjectConstructor;LJavaUtilMap;", "(Lcom/google/gson/internal/ObjectConstructor<TT;>;Ljava/util/Map<Ljava/lang/String;Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;>;)V", "read", "LGsonJsonReader;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonReader;)TT;", "write", "LGsonJsonWriter;LNSObject;", "(Lcom/google/gson/stream/JsonWriter;TT;)V", "Lcom/google/gson/internal/ObjectConstructor<TT;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/google/gson/internal/bind/ReflectiveTypeAdapterFactory$BoundField;>;", "LGsonReflectiveTypeAdapterFactory;", "<T:Ljava/lang/Object;>Lcom/google/gson/TypeAdapter<TT;>;" };
  static const J2ObjcClassInfo _GsonReflectiveTypeAdapterFactory_Adapter = { "Adapter", "com.google.gson.internal.bind", ptrTable, methods, fields, 7, 0x19, 3, 2, 11, -1, -1, 12, -1 };
  return &_GsonReflectiveTypeAdapterFactory_Adapter;
}

@end


#line 199
void GsonReflectiveTypeAdapterFactory_Adapter_initWithGsonObjectConstructor_withJavaUtilMap_(GsonReflectiveTypeAdapterFactory_Adapter *self, id<GsonObjectConstructor> constructor, id<JavaUtilMap> boundFields) {
  GsonTypeAdapter_init(self);
  
#line 200
  self->constructor_ = constructor;
  self->boundFields_ = boundFields;
}


#line 199
GsonReflectiveTypeAdapterFactory_Adapter *new_GsonReflectiveTypeAdapterFactory_Adapter_initWithGsonObjectConstructor_withJavaUtilMap_(id<GsonObjectConstructor> constructor, id<JavaUtilMap> boundFields) {
  J2OBJC_NEW_IMPL(GsonReflectiveTypeAdapterFactory_Adapter, initWithGsonObjectConstructor_withJavaUtilMap_, constructor, boundFields)
}


#line 199
GsonReflectiveTypeAdapterFactory_Adapter *create_GsonReflectiveTypeAdapterFactory_Adapter_initWithGsonObjectConstructor_withJavaUtilMap_(id<GsonObjectConstructor> constructor, id<JavaUtilMap> boundFields) {
  J2OBJC_CREATE_IMPL(GsonReflectiveTypeAdapterFactory_Adapter, initWithGsonObjectConstructor_withJavaUtilMap_, constructor, boundFields)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonReflectiveTypeAdapterFactory_Adapter)
