//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/Gson.java
//

#include "ArrayTypeAdapter.h"
#include "CollectionTypeAdapterFactory.h"
#include "ConstructorConstructor.h"
#include "DateTypeAdapter.h"
#include "Excluder.h"
#include "FieldNamingPolicy.h"
#include "FieldNamingStrategy.h"
#include "Gson.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "JsonAdapterAnnotationTypeAdapterFactory.h"
#include "JsonElement.h"
#include "JsonIOException.h"
#include "JsonNull.h"
#include "JsonReader.h"
#include "JsonSyntaxException.h"
#include "JsonToken.h"
#include "JsonTreeReader.h"
#include "JsonTreeWriter.h"
#include "JsonWriter.h"
#include "LongSerializationPolicy.h"
#include "MalformedJsonException.h"
#include "MapTypeAdapterFactory.h"
#include "ObjectTypeAdapter.h"
#include "Primitives.h"
#include "ReflectiveTypeAdapterFactory.h"
#include "SqlDateTypeAdapter.h"
#include "Streams.h"
#include "TimeTypeAdapter.h"
#include "TypeAdapter.h"
#include "TypeAdapterFactory.h"
#include "TypeAdapters.h"
#include "TypeToken.h"
#include "java/io/EOFException.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/Appendable.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/reflect/Type.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/concurrent/atomic/AtomicLongArray.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface GsonGson () {
 @public
  /*!
   @brief This thread local guards against reentrant calls to getAdapter().In
  certain object graphs, creating an adapter for a type may recursively
  require an adapter for the same type!
   Without intervention, the recursive
  lookup would stack overflow. We cheat by returning a proxy type adapter.
  The proxy is wired up once the initial adapter has been created.
   */
  JavaLangThreadLocal *calls_;
  id<JavaUtilMap> typeTokenCache_;
  id<JavaUtilList> factories_;
  GsonConstructorConstructor *constructorConstructor_;
  GsonExcluder *excluder_;
  id<GsonFieldNamingStrategy> fieldNamingStrategy_;
  jboolean serializeNulls_;
  jboolean htmlSafe_;
  jboolean generateNonExecutableJson_;
  jboolean prettyPrinting_;
  jboolean lenient_;
  GsonJsonAdapterAnnotationTypeAdapterFactory *jsonAdapterFactory_;
}

- (GsonTypeAdapter *)doubleAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues;

- (GsonTypeAdapter *)floatAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues;

+ (GsonTypeAdapter *)longAdapterWithGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)longSerializationPolicy;

+ (GsonTypeAdapter *)atomicLongAdapterWithGsonTypeAdapter:(GsonTypeAdapter *)longAdapter;

+ (GsonTypeAdapter *)atomicLongArrayAdapterWithGsonTypeAdapter:(GsonTypeAdapter *)longAdapter;

+ (void)assertFullConsumptionWithId:(id)obj
                 withGsonJsonReader:(GsonJsonReader *)reader;

@end

J2OBJC_FIELD_SETTER(GsonGson, calls_, JavaLangThreadLocal *)
J2OBJC_FIELD_SETTER(GsonGson, typeTokenCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GsonGson, factories_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GsonGson, constructorConstructor_, GsonConstructorConstructor *)
J2OBJC_FIELD_SETTER(GsonGson, excluder_, GsonExcluder *)
J2OBJC_FIELD_SETTER(GsonGson, fieldNamingStrategy_, id<GsonFieldNamingStrategy>)
J2OBJC_FIELD_SETTER(GsonGson, jsonAdapterFactory_, GsonJsonAdapterAnnotationTypeAdapterFactory *)

inline GsonTypeToken *GsonGson_get_NULL_KEY_SURROGATE(void);
static GsonTypeToken *GsonGson_NULL_KEY_SURROGATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonGson, NULL_KEY_SURROGATE, GsonTypeToken *)

inline NSString *GsonGson_get_JSON_NON_EXECUTABLE_PREFIX(void);
static NSString *GsonGson_JSON_NON_EXECUTABLE_PREFIX = @")]}'\n";
J2OBJC_STATIC_FIELD_OBJ_FINAL(GsonGson, JSON_NON_EXECUTABLE_PREFIX, NSString *)

__attribute__((unused)) static GsonTypeAdapter *GsonGson_doubleAdapterWithBoolean_(GsonGson *self, jboolean serializeSpecialFloatingPointValues);

__attribute__((unused)) static GsonTypeAdapter *GsonGson_floatAdapterWithBoolean_(GsonGson *self, jboolean serializeSpecialFloatingPointValues);

__attribute__((unused)) static GsonTypeAdapter *GsonGson_longAdapterWithGsonLongSerializationPolicy_(GsonLongSerializationPolicy *longSerializationPolicy);

__attribute__((unused)) static GsonTypeAdapter *GsonGson_atomicLongAdapterWithGsonTypeAdapter_(GsonTypeAdapter *longAdapter);

__attribute__((unused)) static GsonTypeAdapter *GsonGson_atomicLongArrayAdapterWithGsonTypeAdapter_(GsonTypeAdapter *longAdapter);

__attribute__((unused)) static void GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(id obj, GsonJsonReader *reader);

@interface GsonGson_1 : GsonTypeToken

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_1)

__attribute__((unused)) static void GsonGson_1_init(GsonGson_1 *self);

__attribute__((unused)) static GsonGson_1 *new_GsonGson_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_1 *create_GsonGson_1_init(void);

@interface GsonGson_2 : GsonTypeAdapter

- (instancetype)init;

- (JavaLangDouble *)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

- (NSNumber *)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_2)

__attribute__((unused)) static void GsonGson_2_init(GsonGson_2 *self);

__attribute__((unused)) static GsonGson_2 *new_GsonGson_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_2 *create_GsonGson_2_init(void);

@interface GsonGson_3 : GsonTypeAdapter

- (instancetype)init;

- (JavaLangFloat *)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

- (NSNumber *)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_3)

__attribute__((unused)) static void GsonGson_3_init(GsonGson_3 *self);

__attribute__((unused)) static GsonGson_3 *new_GsonGson_3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_3 *create_GsonGson_3_init(void);

@interface GsonGson_4 : GsonTypeAdapter

- (instancetype)init;

- (NSNumber *)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value;

- (NSNumber *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (NSNumber *)fromJsonWithNSString:(NSString *)arg0;

- (NSNumber *)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_4)

__attribute__((unused)) static void GsonGson_4_init(GsonGson_4 *self);

__attribute__((unused)) static GsonGson_4 *new_GsonGson_4_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_4 *create_GsonGson_4_init(void);

@interface GsonGson_5 : GsonTypeAdapter {
 @public
  GsonTypeAdapter *val$longAdapter_;
}

- (instancetype)initWithGsonTypeAdapter:(GsonTypeAdapter *)capture$0;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(JavaUtilConcurrentAtomicAtomicLong *)value;

- (JavaUtilConcurrentAtomicAtomicLong *)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (JavaUtilConcurrentAtomicAtomicLong *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (JavaUtilConcurrentAtomicAtomicLong *)fromJsonWithNSString:(NSString *)arg0;

- (JavaUtilConcurrentAtomicAtomicLong *)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_5)

__attribute__((unused)) static void GsonGson_5_initWithGsonTypeAdapter_(GsonGson_5 *self, GsonTypeAdapter *capture$0);

__attribute__((unused)) static GsonGson_5 *new_GsonGson_5_initWithGsonTypeAdapter_(GsonTypeAdapter *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_5 *create_GsonGson_5_initWithGsonTypeAdapter_(GsonTypeAdapter *capture$0);

@interface GsonGson_6 : GsonTypeAdapter {
 @public
  GsonTypeAdapter *val$longAdapter_;
}

- (instancetype)initWithGsonTypeAdapter:(GsonTypeAdapter *)capture$0;

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(JavaUtilConcurrentAtomicAtomicLongArray *)value;

- (JavaUtilConcurrentAtomicAtomicLongArray *)readWithGsonJsonReader:(GsonJsonReader *)inArg;

- (JavaUtilConcurrentAtomicAtomicLongArray *)fromJsonWithJavaIoReader:(JavaIoReader *)arg0;

- (JavaUtilConcurrentAtomicAtomicLongArray *)fromJsonWithNSString:(NSString *)arg0;

- (JavaUtilConcurrentAtomicAtomicLongArray *)fromJsonTreeWithGsonJsonElement:(GsonJsonElement *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonGson_6)

__attribute__((unused)) static void GsonGson_6_initWithGsonTypeAdapter_(GsonGson_6 *self, GsonTypeAdapter *capture$0);

__attribute__((unused)) static GsonGson_6 *new_GsonGson_6_initWithGsonTypeAdapter_(GsonTypeAdapter *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static GsonGson_6 *create_GsonGson_6_initWithGsonTypeAdapter_(GsonTypeAdapter *capture$0);

@interface GsonGson_FutureTypeAdapter () {
 @public
  GsonTypeAdapter *delegate_;
}

@end

J2OBJC_FIELD_SETTER(GsonGson_FutureTypeAdapter, delegate_, GsonTypeAdapter *)

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/Gson.java"

J2OBJC_INITIALIZED_DEFN(GsonGson)


#line 103
@implementation GsonGson

+ (jboolean)DEFAULT_JSON_NON_EXECUTABLE {
  return GsonGson_DEFAULT_JSON_NON_EXECUTABLE;
}

+ (jboolean)DEFAULT_LENIENT {
  return GsonGson_DEFAULT_LENIENT;
}

+ (jboolean)DEFAULT_PRETTY_PRINT {
  return GsonGson_DEFAULT_PRETTY_PRINT;
}

+ (jboolean)DEFAULT_ESCAPE_HTML {
  return GsonGson_DEFAULT_ESCAPE_HTML;
}

+ (jboolean)DEFAULT_SERIALIZE_NULLS {
  return GsonGson_DEFAULT_SERIALIZE_NULLS;
}

+ (jboolean)DEFAULT_COMPLEX_MAP_KEYS {
  return GsonGson_DEFAULT_COMPLEX_MAP_KEYS;
}

+ (jboolean)DEFAULT_SPECIALIZE_FLOAT_VALUES {
  return GsonGson_DEFAULT_SPECIALIZE_FLOAT_VALUES;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 173
- (instancetype)init {
  GsonGson_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 181
- (instancetype)initWithGsonExcluder:(GsonExcluder *)excluder
         withGsonFieldNamingStrategy:(id<GsonFieldNamingStrategy>)fieldNamingStrategy
                     withJavaUtilMap:(id<JavaUtilMap>)instanceCreators
                         withBoolean:(jboolean)serializeNulls
                         withBoolean:(jboolean)complexMapKeySerialization
                         withBoolean:(jboolean)generateNonExecutableGson
                         withBoolean:(jboolean)htmlSafe
                         withBoolean:(jboolean)prettyPrinting
                         withBoolean:(jboolean)lenient
                         withBoolean:(jboolean)serializeSpecialFloatingPointValues
     withGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)longSerializationPolicy
                    withJavaUtilList:(id<JavaUtilList>)typeAdapterFactories {
  GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(self, excluder, fieldNamingStrategy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, lenient, serializeSpecialFloatingPointValues, longSerializationPolicy, typeAdapterFactories);
  return self;
}


#line 258
- (GsonExcluder *)excluder {
  return excluder_;
}

- (id<GsonFieldNamingStrategy>)fieldNamingStrategy {
  return fieldNamingStrategy_;
}

- (jboolean)serializeNulls {
  return serializeNulls_;
}

- (jboolean)htmlSafe {
  return htmlSafe_;
}

- (GsonTypeAdapter *)doubleAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues {
  return GsonGson_doubleAdapterWithBoolean_(self, serializeSpecialFloatingPointValues);
}


#line 298
- (GsonTypeAdapter *)floatAdapterWithBoolean:(jboolean)serializeSpecialFloatingPointValues {
  return GsonGson_floatAdapterWithBoolean_(self, serializeSpecialFloatingPointValues);
}


#line 322
+ (void)checkValidFloatingPointWithDouble:(jdouble)value {
  GsonGson_checkValidFloatingPointWithDouble_(value);
}


#line 330
+ (GsonTypeAdapter *)longAdapterWithGsonLongSerializationPolicy:(GsonLongSerializationPolicy *)longSerializationPolicy {
  return GsonGson_longAdapterWithGsonLongSerializationPolicy_(longSerializationPolicy);
}


#line 352
+ (GsonTypeAdapter *)atomicLongAdapterWithGsonTypeAdapter:(GsonTypeAdapter *)longAdapter {
  return GsonGson_atomicLongAdapterWithGsonTypeAdapter_(longAdapter);
}


#line 364
+ (GsonTypeAdapter *)atomicLongArrayAdapterWithGsonTypeAdapter:(GsonTypeAdapter *)longAdapter {
  return GsonGson_atomicLongArrayAdapterWithGsonTypeAdapter_(longAdapter);
}


#line 397
- (GsonTypeAdapter *)getAdapterWithGsonTypeToken:(GsonTypeToken *)type {
  
#line 399
  GsonTypeAdapter *cached = [((id<JavaUtilMap>) nil_chk(typeTokenCache_)) getWithId:type == nil ? GsonGson_NULL_KEY_SURROGATE : type];
  if (cached != nil) {
    return cached;
  }
  
#line 404
  id<JavaUtilMap> threadCalls = [((JavaLangThreadLocal *) nil_chk(calls_)) get];
  jboolean requiresThreadLocalCleanup = false;
  if (threadCalls == nil) {
    threadCalls = new_JavaUtilHashMap_init();
    [calls_ setWithId:threadCalls];
    requiresThreadLocalCleanup = true;
  }
  
#line 413
  GsonGson_FutureTypeAdapter *ongoingCall = [threadCalls getWithId:type];
  if (ongoingCall != nil) {
    return ongoingCall;
  }
  
#line 418
  @try {
    GsonGson_FutureTypeAdapter *call = new_GsonGson_FutureTypeAdapter_init();
    (void) [threadCalls putWithId:type withId:call];
    
#line 422
    for (id<GsonTypeAdapterFactory> __strong factory in nil_chk(factories_)) {
      GsonTypeAdapter *candidate = [((id<GsonTypeAdapterFactory>) nil_chk(factory)) createWithGsonGson:self withGsonTypeToken:type];
      if (candidate != nil) {
        [call setDelegateWithGsonTypeAdapter:candidate];
        (void) [typeTokenCache_ putWithId:type withId:candidate];
        return candidate;
      }
    }
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"GSON cannot handle ", type));
  }
  @finally {
    
#line 432
    (void) [threadCalls removeWithId:type];
    
#line 434
    if (requiresThreadLocalCleanup) {
      [calls_ remove];
    }
  }
}


#line 490
- (GsonTypeAdapter *)getDelegateAdapterWithGsonTypeAdapterFactory:(id<GsonTypeAdapterFactory>)skipPast
                                                withGsonTypeToken:(GsonTypeToken *)type {
  
#line 493
  if (![((id<JavaUtilList>) nil_chk(factories_)) containsWithId:skipPast]) {
    skipPast = jsonAdapterFactory_;
  }
  
#line 497
  jboolean skipPastFound = false;
  for (id<GsonTypeAdapterFactory> __strong factory in factories_) {
    if (!skipPastFound) {
      if (factory == skipPast) {
        skipPastFound = true;
      }
      continue;
    }
    
#line 506
    GsonTypeAdapter *candidate = [((id<GsonTypeAdapterFactory>) nil_chk(factory)) createWithGsonGson:self withGsonTypeToken:type];
    if (candidate != nil) {
      return candidate;
    }
  }
  @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"GSON cannot serialize ", type));
}


#line 520
- (GsonTypeAdapter *)getAdapterWithIOSClass:(IOSClass *)type {
  return [self getAdapterWithGsonTypeToken:GsonTypeToken_getWithIOSClass_(type)];
}


#line 537
- (GsonJsonElement *)toJsonTreeWithId:(id)src {
  if (src == nil) {
    return JreLoadStatic(GsonJsonNull, INSTANCE);
  }
  return [self toJsonTreeWithId:src withJavaLangReflectType:[src java_getClass]];
}


#line 560
- (GsonJsonElement *)toJsonTreeWithId:(id)src
              withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc {
  GsonJsonTreeWriter *writer = new_GsonJsonTreeWriter_init();
  [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withGsonJsonWriter:writer];
  return [writer get];
}


#line 579
- (NSString *)toJsonWithId:(id)src {
  if (src == nil) {
    return [self toJsonWithGsonJsonElement:JreLoadStatic(GsonJsonNull, INSTANCE)];
  }
  return [self toJsonWithId:src withJavaLangReflectType:[src java_getClass]];
}


#line 601
- (NSString *)toJsonWithId:(id)src
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc {
  JavaIoStringWriter *writer = new_JavaIoStringWriter_init();
  [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withJavaLangAppendable:writer];
  return [writer description];
}


#line 621
- (void)toJsonWithId:(id)src
withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  if (src != nil) {
    [self toJsonWithId:src withJavaLangReflectType:[src java_getClass] withJavaLangAppendable:writer];
  }
  else {
    
#line 625
    [self toJsonWithGsonJsonElement:JreLoadStatic(GsonJsonNull, INSTANCE) withJavaLangAppendable:writer];
  }
}


#line 645
- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  @try {
    GsonJsonWriter *jsonWriter = [self newJsonWriterWithJavaIoWriter:GsonStreams_writerForAppendableWithJavaLangAppendable_(writer)];
    [self toJsonWithId:src withJavaLangReflectType:typeOfSrc withGsonJsonWriter:jsonWriter];
  }
  @catch (
#line 649
  JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
}

- (void)toJsonWithId:(id)src
withJavaLangReflectType:(id<JavaLangReflectType>)typeOfSrc
  withGsonJsonWriter:(GsonJsonWriter *)writer {
  
#line 661
  GsonTypeAdapter *adapter = [self getAdapterWithGsonTypeToken:GsonTypeToken_getWithJavaLangReflectType_(typeOfSrc)];
  jboolean oldLenient = [((GsonJsonWriter *) nil_chk(writer)) isLenient];
  [writer setLenientWithBoolean:true];
  jboolean oldHtmlSafe = [writer isHtmlSafe];
  [writer setHtmlSafeWithBoolean:htmlSafe_];
  jboolean oldSerializeNulls = [writer getSerializeNulls];
  [writer setSerializeNullsWithBoolean:serializeNulls_];
  @try {
    [((GsonTypeAdapter *) nil_chk((adapter))) writeWithGsonJsonWriter:writer withId:src];
  }
  @catch (
#line 670
  JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
  @finally {
    
#line 673
    [writer setLenientWithBoolean:oldLenient];
    [writer setHtmlSafeWithBoolean:oldHtmlSafe];
    [writer setSerializeNullsWithBoolean:oldSerializeNulls];
  }
}


#line 686
- (NSString *)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement {
  JavaIoStringWriter *writer = new_JavaIoStringWriter_init();
  [self toJsonWithGsonJsonElement:jsonElement withJavaLangAppendable:writer];
  return [writer description];
}


#line 700
- (void)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement
           withJavaLangAppendable:(id<JavaLangAppendable>)writer {
  @try {
    GsonJsonWriter *jsonWriter = [self newJsonWriterWithJavaIoWriter:GsonStreams_writerForAppendableWithJavaLangAppendable_(writer)];
    [self toJsonWithGsonJsonElement:jsonElement withGsonJsonWriter:jsonWriter];
  }
  @catch (
#line 704
  JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
}


#line 712
- (GsonJsonWriter *)newJsonWriterWithJavaIoWriter:(JavaIoWriter *)writer {
  if (generateNonExecutableJson_) {
    [((JavaIoWriter *) nil_chk(writer)) writeWithNSString:GsonGson_JSON_NON_EXECUTABLE_PREFIX];
  }
  GsonJsonWriter *jsonWriter = new_GsonJsonWriter_initWithJavaIoWriter_(writer);
  if (prettyPrinting_) {
    [jsonWriter setIndentWithNSString:@"  "];
  }
  [jsonWriter setSerializeNullsWithBoolean:serializeNulls_];
  return jsonWriter;
}


#line 727
- (GsonJsonReader *)newJsonReaderWithJavaIoReader:(JavaIoReader *)reader {
  GsonJsonReader *jsonReader = new_GsonJsonReader_initWithJavaIoReader_(reader);
  [jsonReader setLenientWithBoolean:lenient_];
  return jsonReader;
}


#line 737
- (void)toJsonWithGsonJsonElement:(GsonJsonElement *)jsonElement
               withGsonJsonWriter:(GsonJsonWriter *)writer {
  jboolean oldLenient = [((GsonJsonWriter *) nil_chk(writer)) isLenient];
  [writer setLenientWithBoolean:true];
  jboolean oldHtmlSafe = [writer isHtmlSafe];
  [writer setHtmlSafeWithBoolean:htmlSafe_];
  jboolean oldSerializeNulls = [writer getSerializeNulls];
  [writer setSerializeNullsWithBoolean:serializeNulls_];
  @try {
    GsonStreams_writeWithGsonJsonElement_withGsonJsonWriter_(jsonElement, writer);
  }
  @catch (
#line 746
  JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
  @finally {
    
#line 749
    [writer setLenientWithBoolean:oldLenient];
    [writer setHtmlSafeWithBoolean:oldHtmlSafe];
    [writer setSerializeNullsWithBoolean:oldSerializeNulls];
  }
}


#line 772
- (id)fromJsonWithNSString:(NSString *)json
              withIOSClass:(IOSClass *)classOfT {
  id object = [self fromJsonWithNSString:json withJavaLangReflectType:classOfT];
  return [((IOSClass *) nil_chk(GsonPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}


#line 795
- (id)fromJsonWithNSString:(NSString *)json
   withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  
#line 797
  if (json == nil) {
    return nil;
  }
  JavaIoStringReader *reader = new_JavaIoStringReader_initWithNSString_(json);
  id target = [self fromJsonWithJavaIoReader:reader withJavaLangReflectType:typeOfT];
  return target;
}


#line 823
- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
                  withIOSClass:(IOSClass *)classOfT {
  GsonJsonReader *jsonReader = [self newJsonReaderWithJavaIoReader:json];
  id object = [self fromJsonWithGsonJsonReader:jsonReader withJavaLangReflectType:classOfT];
  GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(object, jsonReader);
  return [((IOSClass *) nil_chk(GsonPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}


#line 849
- (id)fromJsonWithJavaIoReader:(JavaIoReader *)json
       withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  
#line 851
  GsonJsonReader *jsonReader = [self newJsonReaderWithJavaIoReader:json];
  id object = [self fromJsonWithGsonJsonReader:jsonReader withJavaLangReflectType:typeOfT];
  GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(object, jsonReader);
  return object;
}


#line 857
+ (void)assertFullConsumptionWithId:(id)obj
                 withGsonJsonReader:(GsonJsonReader *)reader {
  GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(obj, reader);
}


#line 877
- (id)fromJsonWithGsonJsonReader:(GsonJsonReader *)reader
         withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  
#line 879
  jboolean isEmpty = true;
  jboolean oldLenient = [((GsonJsonReader *) nil_chk(reader)) isLenient];
  [reader setLenientWithBoolean:true];
  @try {
    (void) [reader peek];
    isEmpty = false;
    GsonTypeToken *typeToken = GsonTypeToken_getWithJavaLangReflectType_(typeOfT);
    GsonTypeAdapter *typeAdapter = [self getAdapterWithGsonTypeToken:typeToken];
    id object = [((GsonTypeAdapter *) nil_chk(typeAdapter)) readWithGsonJsonReader:reader];
    return object;
  }
  @catch (
#line 889
  JavaIoEOFException *e) {
    
#line 894
    if (isEmpty) {
      return nil;
    }
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (
#line 898
  JavaLangIllegalStateException *e) {
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (
#line 900
  JavaIoIOException *e) {
    
#line 902
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @finally {
    
#line 904
    [reader setLenientWithBoolean:oldLenient];
  }
}


#line 924
- (id)fromJsonWithGsonJsonElement:(GsonJsonElement *)json
                     withIOSClass:(IOSClass *)classOfT {
  id object = [self fromJsonWithGsonJsonElement:json withJavaLangReflectType:classOfT];
  return [((IOSClass *) nil_chk(GsonPrimitives_wrapWithIOSClass_(classOfT))) cast:object];
}


#line 947
- (id)fromJsonWithGsonJsonElement:(GsonJsonElement *)json
          withJavaLangReflectType:(id<JavaLangReflectType>)typeOfT {
  
#line 949
  if (json == nil) {
    return nil;
  }
  return [self fromJsonWithGsonJsonReader:new_GsonJsonTreeReader_initWithGsonJsonElement_(json) withJavaLangReflectType:typeOfT];
}


#line 980
- (NSString *)description {
  
#line 982
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([new_JavaLangStringBuilder_initWithNSString_(@"{serializeNulls:") appendWithBoolean:
#line 983
  serializeNulls_])) appendWithNSString:
#line 984
  @"factories:"])) appendWithId:factories_])) appendWithNSString:
#line 985
  @",instanceCreators:"])) appendWithId:constructorConstructor_])) appendWithNSString:
#line 986
  @"}"])) description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LGsonExcluder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonFieldNamingStrategy;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x2, 5, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x8, 6, 7, -1, -1, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0xa, 8, 9, -1, 10, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0xa, 11, 12, -1, 13, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0xa, 14, 12, -1, 15, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LGsonTypeAdapter;", 0x1, 16, 22, -1, 23, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 24, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 29, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 30, 29, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 31, 29, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 27, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 33, 29, -1, -1, -1 },
    { NULL, "LGsonJsonWriter;", 0x1, 34, 35, 36, -1, -1, -1 },
    { NULL, "LGsonJsonReader;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 39, 29, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 41, 42, 43, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 44, 42, 45, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 46, 47, 48, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 49, 50, 51, -1, -1 },
    { NULL, "V", 0xa, 52, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 54, 50, 55, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 56, 42, 57, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 58, 42, 59, -1, -1 },
    { NULL, "LNSString;", 0x1, 60, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithGsonExcluder:withGsonFieldNamingStrategy:withJavaUtilMap:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withGsonLongSerializationPolicy:withJavaUtilList:);
  methods[2].selector = @selector(excluder);
  methods[3].selector = @selector(fieldNamingStrategy);
  methods[4].selector = @selector(serializeNulls);
  methods[5].selector = @selector(htmlSafe);
  methods[6].selector = @selector(doubleAdapterWithBoolean:);
  methods[7].selector = @selector(floatAdapterWithBoolean:);
  methods[8].selector = @selector(checkValidFloatingPointWithDouble:);
  methods[9].selector = @selector(longAdapterWithGsonLongSerializationPolicy:);
  methods[10].selector = @selector(atomicLongAdapterWithGsonTypeAdapter:);
  methods[11].selector = @selector(atomicLongArrayAdapterWithGsonTypeAdapter:);
  methods[12].selector = @selector(getAdapterWithGsonTypeToken:);
  methods[13].selector = @selector(getDelegateAdapterWithGsonTypeAdapterFactory:withGsonTypeToken:);
  methods[14].selector = @selector(getAdapterWithIOSClass:);
  methods[15].selector = @selector(toJsonTreeWithId:);
  methods[16].selector = @selector(toJsonTreeWithId:withJavaLangReflectType:);
  methods[17].selector = @selector(toJsonWithId:);
  methods[18].selector = @selector(toJsonWithId:withJavaLangReflectType:);
  methods[19].selector = @selector(toJsonWithId:withJavaLangAppendable:);
  methods[20].selector = @selector(toJsonWithId:withJavaLangReflectType:withJavaLangAppendable:);
  methods[21].selector = @selector(toJsonWithId:withJavaLangReflectType:withGsonJsonWriter:);
  methods[22].selector = @selector(toJsonWithGsonJsonElement:);
  methods[23].selector = @selector(toJsonWithGsonJsonElement:withJavaLangAppendable:);
  methods[24].selector = @selector(newJsonWriterWithJavaIoWriter:);
  methods[25].selector = @selector(newJsonReaderWithJavaIoReader:);
  methods[26].selector = @selector(toJsonWithGsonJsonElement:withGsonJsonWriter:);
  methods[27].selector = @selector(fromJsonWithNSString:withIOSClass:);
  methods[28].selector = @selector(fromJsonWithNSString:withJavaLangReflectType:);
  methods[29].selector = @selector(fromJsonWithJavaIoReader:withIOSClass:);
  methods[30].selector = @selector(fromJsonWithJavaIoReader:withJavaLangReflectType:);
  methods[31].selector = @selector(assertFullConsumptionWithId:withGsonJsonReader:);
  methods[32].selector = @selector(fromJsonWithGsonJsonReader:withJavaLangReflectType:);
  methods[33].selector = @selector(fromJsonWithGsonJsonElement:withIOSClass:);
  methods[34].selector = @selector(fromJsonWithGsonJsonElement:withJavaLangReflectType:);
  methods[35].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_JSON_NON_EXECUTABLE", "Z", .constantValue.asBOOL = GsonGson_DEFAULT_JSON_NON_EXECUTABLE, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_LENIENT", "Z", .constantValue.asBOOL = GsonGson_DEFAULT_LENIENT, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_PRETTY_PRINT", "Z", .constantValue.asBOOL = GsonGson_DEFAULT_PRETTY_PRINT, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_ESCAPE_HTML", "Z", .constantValue.asBOOL = GsonGson_DEFAULT_ESCAPE_HTML, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_SERIALIZE_NULLS", "Z", .constantValue.asBOOL = GsonGson_DEFAULT_SERIALIZE_NULLS, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_COMPLEX_MAP_KEYS", "Z", .constantValue.asBOOL = GsonGson_DEFAULT_COMPLEX_MAP_KEYS, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_SPECIALIZE_FLOAT_VALUES", "Z", .constantValue.asBOOL = GsonGson_DEFAULT_SPECIALIZE_FLOAT_VALUES, 0x18, -1, -1, -1, -1 },
    { "NULL_KEY_SURROGATE", "LGsonTypeToken;", .constantValue.asLong = 0, 0x1a, -1, 61, 62, -1 },
    { "JSON_NON_EXECUTABLE_PREFIX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 63, -1, -1 },
    { "calls_", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x12, -1, -1, 64, -1 },
    { "typeTokenCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 65, -1 },
    { "factories_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 66, -1 },
    { "constructorConstructor_", "LGsonConstructorConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "excluder_", "LGsonExcluder;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fieldNamingStrategy_", "LGsonFieldNamingStrategy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "serializeNulls_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "htmlSafe_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "generateNonExecutableJson_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "prettyPrinting_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lenient_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jsonAdapterFactory_", "LGsonJsonAdapterAnnotationTypeAdapterFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LGsonExcluder;LGsonFieldNamingStrategy;LJavaUtilMap;ZZZZZZZLGsonLongSerializationPolicy;LJavaUtilList;", "(Lcom/google/gson/internal/Excluder;Lcom/google/gson/FieldNamingStrategy;Ljava/util/Map<Ljava/lang/reflect/Type;Lcom/google/gson/InstanceCreator<*>;>;ZZZZZZZLcom/google/gson/LongSerializationPolicy;Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;)V", "doubleAdapter", "Z", "(Z)Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "floatAdapter", "checkValidFloatingPoint", "D", "longAdapter", "LGsonLongSerializationPolicy;", "(Lcom/google/gson/LongSerializationPolicy;)Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "atomicLongAdapter", "LGsonTypeAdapter;", "(Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;)Lcom/google/gson/TypeAdapter<Ljava/util/concurrent/atomic/AtomicLong;>;", "atomicLongArrayAdapter", "(Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;)Lcom/google/gson/TypeAdapter<Ljava/util/concurrent/atomic/AtomicLongArray;>;", "getAdapter", "LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "getDelegateAdapter", "LGsonTypeAdapterFactory;LGsonTypeToken;", "<T:Ljava/lang/Object;>(Lcom/google/gson/TypeAdapterFactory;Lcom/google/gson/reflect/TypeToken<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lcom/google/gson/TypeAdapter<TT;>;", "toJsonTree", "LNSObject;", "LNSObject;LJavaLangReflectType;", "toJson", "LNSObject;LJavaLangAppendable;", "LGsonJsonIOException;", "LNSObject;LJavaLangReflectType;LJavaLangAppendable;", "LNSObject;LJavaLangReflectType;LGsonJsonWriter;", "LGsonJsonElement;", "LGsonJsonElement;LJavaLangAppendable;", "newJsonWriter", "LJavaIoWriter;", "LJavaIoIOException;", "newJsonReader", "LJavaIoReader;", "LGsonJsonElement;LGsonJsonWriter;", "fromJson", "LNSString;LIOSClass;", "LGsonJsonSyntaxException;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;)TT;", "LNSString;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/reflect/Type;)TT;", "LJavaIoReader;LIOSClass;", "LGsonJsonSyntaxException;LGsonJsonIOException;", "<T:Ljava/lang/Object;>(Ljava/io/Reader;Ljava/lang/Class<TT;>;)TT;", "LJavaIoReader;LJavaLangReflectType;", "LGsonJsonIOException;LGsonJsonSyntaxException;", "<T:Ljava/lang/Object;>(Ljava/io/Reader;Ljava/lang/reflect/Type;)TT;", "assertFullConsumption", "LNSObject;LGsonJsonReader;", "LGsonJsonReader;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lcom/google/gson/stream/JsonReader;Ljava/lang/reflect/Type;)TT;", "LGsonJsonElement;LIOSClass;", "<T:Ljava/lang/Object;>(Lcom/google/gson/JsonElement;Ljava/lang/Class<TT;>;)TT;", "LGsonJsonElement;LJavaLangReflectType;", "<T:Ljava/lang/Object;>(Lcom/google/gson/JsonElement;Ljava/lang/reflect/Type;)TT;", "toString", &GsonGson_NULL_KEY_SURROGATE, "Lcom/google/gson/reflect/TypeToken<*>;", &GsonGson_JSON_NON_EXECUTABLE_PREFIX, "Ljava/lang/ThreadLocal<Ljava/util/Map<Lcom/google/gson/reflect/TypeToken<*>;Lcom/google/gson/Gson$FutureTypeAdapter<*>;>;>;", "Ljava/util/Map<Lcom/google/gson/reflect/TypeToken<*>;Lcom/google/gson/TypeAdapter<*>;>;", "Ljava/util/List<Lcom/google/gson/TypeAdapterFactory;>;", "LGsonGson_FutureTypeAdapter;" };
  static const J2ObjcClassInfo _GsonGson = { "Gson", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 36, 21, -1, 67, -1, -1, -1 };
  return &_GsonGson;
}

+ (void)initialize {
  if (self == [GsonGson class]) {
    GsonGson_NULL_KEY_SURROGATE = new_GsonGson_1_init();
    J2OBJC_SET_INITIALIZED(GsonGson)
  }
}

@end


#line 173
void GsonGson_init(GsonGson *self) {
  GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(self, JreLoadStatic(GsonExcluder, DEFAULT), JreLoadEnum(GsonFieldNamingPolicy, IDENTITY), JavaUtilCollections_emptyMap(), GsonGson_DEFAULT_SERIALIZE_NULLS, GsonGson_DEFAULT_COMPLEX_MAP_KEYS, GsonGson_DEFAULT_JSON_NON_EXECUTABLE, GsonGson_DEFAULT_ESCAPE_HTML, GsonGson_DEFAULT_PRETTY_PRINT, GsonGson_DEFAULT_LENIENT, GsonGson_DEFAULT_SPECIALIZE_FLOAT_VALUES, JreLoadEnum(GsonLongSerializationPolicy, DEFAULT), JavaUtilCollections_emptyList());
}


#line 173
GsonGson *new_GsonGson_init() {
  J2OBJC_NEW_IMPL(GsonGson, init)
}


#line 173
GsonGson *create_GsonGson_init() {
  J2OBJC_CREATE_IMPL(GsonGson, init)
}


#line 181
void GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonGson *self, GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories) {
  NSObject_init(self);
  self->calls_ = new_JavaLangThreadLocal_init();
  self->typeTokenCache_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  
#line 187
  self->constructorConstructor_ = new_GsonConstructorConstructor_initWithJavaUtilMap_(instanceCreators);
  self->excluder_ = excluder;
  self->fieldNamingStrategy_ = fieldNamingStrategy;
  self->serializeNulls_ = serializeNulls;
  self->generateNonExecutableJson_ = generateNonExecutableGson;
  self->htmlSafe_ = htmlSafe;
  self->prettyPrinting_ = prettyPrinting;
  self->lenient_ = lenient;
  
#line 196
  id<JavaUtilList> factories = new_JavaUtilArrayList_init();
  
#line 199
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, JSON_ELEMENT_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonObjectTypeAdapter, FACTORY)];
  
#line 203
  [factories addWithId:excluder];
  
#line 206
  [factories addAllWithJavaUtilCollection:typeAdapterFactories];
  
#line 209
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, STRING_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, INTEGER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, BOOLEAN_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, BYTE_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, SHORT_FACTORY)];
  GsonTypeAdapter *longAdapter = GsonGson_longAdapterWithGsonLongSerializationPolicy_(longSerializationPolicy);
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGsonTypeAdapter_([IOSClass longClass], JavaLangLong_class_(), longAdapter)];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGsonTypeAdapter_([IOSClass doubleClass], JavaLangDouble_class_(), GsonGson_doubleAdapterWithBoolean_(self,
#line 217
  serializeSpecialFloatingPointValues))];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withIOSClass_withGsonTypeAdapter_([IOSClass floatClass], JavaLangFloat_class_(), GsonGson_floatAdapterWithBoolean_(self,
#line 219
  serializeSpecialFloatingPointValues))];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, NUMBER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, ATOMIC_INTEGER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, ATOMIC_BOOLEAN_FACTORY)];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withGsonTypeAdapter_(JavaUtilConcurrentAtomicAtomicLong_class_(), GsonGson_atomicLongAdapterWithGsonTypeAdapter_(longAdapter))];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withGsonTypeAdapter_(JavaUtilConcurrentAtomicAtomicLongArray_class_(), GsonGson_atomicLongArrayAdapterWithGsonTypeAdapter_(longAdapter))];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, ATOMIC_INTEGER_ARRAY_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, CHARACTER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, STRING_BUILDER_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, STRING_BUFFER_FACTORY)];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withGsonTypeAdapter_(JavaMathBigDecimal_class_(), JreLoadStatic(GsonTypeAdapters, BIG_DECIMAL))];
  [factories addWithId:GsonTypeAdapters_newFactoryWithIOSClass_withGsonTypeAdapter_(JavaMathBigInteger_class_(), JreLoadStatic(GsonTypeAdapters, BIG_INTEGER))];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, URL_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, URI_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, UUID_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, CURRENCY_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, LOCALE_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, INET_ADDRESS_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, BIT_SET_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonDateTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, CALENDAR_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTimeTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GsonSqlDateTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, TIMESTAMP_FACTORY)];
  [factories addWithId:JreLoadStatic(GsonArrayTypeAdapter, FACTORY)];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, CLASS_FACTORY)];
  
#line 247
  [factories addWithId:new_GsonCollectionTypeAdapterFactory_initWithGsonConstructorConstructor_(self->constructorConstructor_)];
  [factories addWithId:new_GsonMapTypeAdapterFactory_initWithGsonConstructorConstructor_withBoolean_(self->constructorConstructor_, complexMapKeySerialization)];
  self->jsonAdapterFactory_ = new_GsonJsonAdapterAnnotationTypeAdapterFactory_initWithGsonConstructorConstructor_(self->constructorConstructor_);
  [factories addWithId:self->jsonAdapterFactory_];
  [factories addWithId:JreLoadStatic(GsonTypeAdapters, ENUM_FACTORY)];
  [factories addWithId:new_GsonReflectiveTypeAdapterFactory_initWithGsonConstructorConstructor_withGsonFieldNamingStrategy_withGsonExcluder_withGsonJsonAdapterAnnotationTypeAdapterFactory_(self->constructorConstructor_,
#line 253
  fieldNamingStrategy, excluder, self->jsonAdapterFactory_)];
  
#line 255
  self->factories_ = JavaUtilCollections_unmodifiableListWithJavaUtilList_(factories);
}


#line 181
GsonGson *new_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories) {
  J2OBJC_NEW_IMPL(GsonGson, initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_, excluder, fieldNamingStrategy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, lenient, serializeSpecialFloatingPointValues, longSerializationPolicy, typeAdapterFactories)
}


#line 181
GsonGson *create_GsonGson_initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_(GsonExcluder *excluder, id<GsonFieldNamingStrategy> fieldNamingStrategy, id<JavaUtilMap> instanceCreators, jboolean serializeNulls, jboolean complexMapKeySerialization, jboolean generateNonExecutableGson, jboolean htmlSafe, jboolean prettyPrinting, jboolean lenient, jboolean serializeSpecialFloatingPointValues, GsonLongSerializationPolicy *longSerializationPolicy, id<JavaUtilList> typeAdapterFactories) {
  J2OBJC_CREATE_IMPL(GsonGson, initWithGsonExcluder_withGsonFieldNamingStrategy_withJavaUtilMap_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withGsonLongSerializationPolicy_withJavaUtilList_, excluder, fieldNamingStrategy, instanceCreators, serializeNulls, complexMapKeySerialization, generateNonExecutableGson, htmlSafe, prettyPrinting, lenient, serializeSpecialFloatingPointValues, longSerializationPolicy, typeAdapterFactories)
}


#line 274
GsonTypeAdapter *GsonGson_doubleAdapterWithBoolean_(GsonGson *self, jboolean serializeSpecialFloatingPointValues) {
  if (serializeSpecialFloatingPointValues) {
    return JreLoadStatic(GsonTypeAdapters, DOUBLE);
  }
  return new_GsonGson_2_init();
}


#line 298
GsonTypeAdapter *GsonGson_floatAdapterWithBoolean_(GsonGson *self, jboolean serializeSpecialFloatingPointValues) {
  if (serializeSpecialFloatingPointValues) {
    return JreLoadStatic(GsonTypeAdapters, FLOAT);
  }
  return new_GsonGson_3_init();
}


#line 322
void GsonGson_checkValidFloatingPointWithDouble_(jdouble value) {
  GsonGson_initialize();
  
#line 323
  if (JavaLangDouble_isNaNWithDouble_(value) || JavaLangDouble_isInfiniteWithDouble_(value)) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("D$", value, @" is not a valid double value as per JSON specification. To override this behavior, use GsonBuilder.serializeSpecialFloatingPointValues() method."));
  }
}


#line 330
GsonTypeAdapter *GsonGson_longAdapterWithGsonLongSerializationPolicy_(GsonLongSerializationPolicy *longSerializationPolicy) {
  GsonGson_initialize();
  
#line 331
  if (longSerializationPolicy == JreLoadEnum(GsonLongSerializationPolicy, DEFAULT)) {
    return JreLoadStatic(GsonTypeAdapters, LONG);
  }
  return new_GsonGson_4_init();
}


#line 352
GsonTypeAdapter *GsonGson_atomicLongAdapterWithGsonTypeAdapter_(GsonTypeAdapter *longAdapter) {
  GsonGson_initialize();
  
#line 353
  return [new_GsonGson_5_initWithGsonTypeAdapter_(longAdapter) nullSafe];
}


#line 364
GsonTypeAdapter *GsonGson_atomicLongArrayAdapterWithGsonTypeAdapter_(GsonTypeAdapter *longAdapter) {
  GsonGson_initialize();
  
#line 365
  return [new_GsonGson_6_initWithGsonTypeAdapter_(longAdapter) nullSafe];
}


#line 857
void GsonGson_assertFullConsumptionWithId_withGsonJsonReader_(id obj, GsonJsonReader *reader) {
  GsonGson_initialize();
  
#line 858
  @try {
    if (obj != nil && [((GsonJsonReader *) nil_chk(reader)) peek] != JreLoadEnum(GsonJsonToken, END_DOCUMENT)) {
      @throw new_GsonJsonIOException_initWithNSString_(@"JSON document was not fully consumed.");
    }
  }
  @catch (
#line 862
  GsonMalformedJsonException *e) {
    @throw new_GsonJsonSyntaxException_initWithJavaLangThrowable_(e);
  }
  @catch (
#line 864
  JavaIoIOException *e) {
    @throw new_GsonJsonIOException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonGson)

J2OBJC_NAME_MAPPING(GsonGson, "com.google.gson", "Gson")

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/Gson.java"


#line 112
@implementation GsonGson_1

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 112
- (instancetype)init {
  GsonGson_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LGsonGson;", "Lcom/google/gson/reflect/TypeToken<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _GsonGson_1 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 1, 0, 0, -1, -1, 1, -1 };
  return &_GsonGson_1;
}

@end


#line 112
void GsonGson_1_init(GsonGson_1 *self) {
  GsonTypeToken_init(self);
}


#line 112
GsonGson_1 *new_GsonGson_1_init() {
  J2OBJC_NEW_IMPL(GsonGson_1, init)
}


#line 112
GsonGson_1 *create_GsonGson_1_init() {
  J2OBJC_CREATE_IMPL(GsonGson_1, init)
}

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/Gson.java"


#line 278
@implementation GsonGson_2

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 278
- (instancetype)init {
  GsonGson_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 279
- (JavaLangDouble *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangDouble_valueOfWithDouble_([inArg nextDouble]);
}


#line 286
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  jdouble doubleValue = [value doubleValue];
  GsonGson_checkValidFloatingPointWithDouble_(doubleValue);
  (void) [((GsonJsonWriter *) nil_chk(outArg)) valueWithNSNumber:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "LGsonJsonReader;", "LJavaIoIOException;", "write", "LGsonJsonWriter;LNSNumber;", "LGsonGson;", "doubleAdapterWithBoolean:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GsonGson_2 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, 6, 7, -1 };
  return &_GsonGson_2;
}

@end


#line 278
void GsonGson_2_init(GsonGson_2 *self) {
  GsonTypeAdapter_init(self);
}


#line 278
GsonGson_2 *new_GsonGson_2_init() {
  J2OBJC_NEW_IMPL(GsonGson_2, init)
}


#line 278
GsonGson_2 *create_GsonGson_2_init() {
  J2OBJC_CREATE_IMPL(GsonGson_2, init)
}

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/Gson.java"


#line 302
@implementation GsonGson_3

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 302
- (instancetype)init {
  GsonGson_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 303
- (JavaLangFloat *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangFloat_valueOfWithFloat_((jfloat) [inArg nextDouble]);
}


#line 310
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  jfloat floatValue = [value floatValue];
  GsonGson_checkValidFloatingPointWithDouble_(floatValue);
  (void) [((GsonJsonWriter *) nil_chk(outArg)) valueWithNSNumber:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "LGsonJsonReader;", "LJavaIoIOException;", "write", "LGsonJsonWriter;LNSNumber;", "LGsonGson;", "floatAdapterWithBoolean:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GsonGson_3 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, 6, 7, -1 };
  return &_GsonGson_3;
}

@end


#line 302
void GsonGson_3_init(GsonGson_3 *self) {
  GsonTypeAdapter_init(self);
}


#line 302
GsonGson_3 *new_GsonGson_3_init() {
  J2OBJC_NEW_IMPL(GsonGson_3, init)
}


#line 302
GsonGson_3 *create_GsonGson_3_init() {
  J2OBJC_CREATE_IMPL(GsonGson_3, init)
}

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/Gson.java"


#line 334
@implementation GsonGson_4

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 334
- (instancetype)init {
  GsonGson_4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 335
- (NSNumber *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if ([((GsonJsonReader *) nil_chk(inArg)) peek] == JreLoadEnum(GsonJsonToken, NULL)) {
    [inArg nextNull];
    return nil;
  }
  return JavaLangLong_valueOfWithLong_([inArg nextLong]);
}


#line 342
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(NSNumber *)value {
  if (value == nil) {
    (void) [((GsonJsonWriter *) nil_chk(outArg)) nullValue];
    return;
  }
  (void) [((GsonJsonWriter *) nil_chk(outArg)) valueWithNSString:[value description]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSNumber;", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(readWithGsonJsonReader:);
  methods[2].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "read", "LGsonJsonReader;", "LJavaIoIOException;", "write", "LGsonJsonWriter;LNSNumber;", "LGsonGson;", "longAdapterWithGsonLongSerializationPolicy:", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;" };
  static const J2ObjcClassInfo _GsonGson_4 = { "", "com.google.gson", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 5, -1, 6, 7, -1 };
  return &_GsonGson_4;
}

@end


#line 334
void GsonGson_4_init(GsonGson_4 *self) {
  GsonTypeAdapter_init(self);
}


#line 334
GsonGson_4 *new_GsonGson_4_init() {
  J2OBJC_NEW_IMPL(GsonGson_4, init)
}


#line 334
GsonGson_4 *create_GsonGson_4_init() {
  J2OBJC_CREATE_IMPL(GsonGson_4, init)
}

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/Gson.java"


#line 353
@implementation GsonGson_5


#line 353
- (instancetype)initWithGsonTypeAdapter:(GsonTypeAdapter *)capture$0 {
  GsonGson_5_initWithGsonTypeAdapter_(self, capture$0);
  return self;
}


#line 354
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(JavaUtilConcurrentAtomicAtomicLong *)value {
  [((GsonTypeAdapter *) nil_chk(val$longAdapter_)) writeWithGsonJsonWriter:outArg withId:JavaLangLong_valueOfWithLong_([((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(value)) get])];
}


#line 357
- (JavaUtilConcurrentAtomicAtomicLong *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  NSNumber *value = [((GsonTypeAdapter *) nil_chk(val$longAdapter_)) readWithGsonJsonReader:inArg];
  return new_JavaUtilConcurrentAtomicAtomicLong_initWithLong_([((NSNumber *) nil_chk(value)) longLongValue]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentAtomicAtomicLong;", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithGsonTypeAdapter:);
  methods[1].selector = @selector(writeWithGsonJsonWriter:withId:);
  methods[2].selector = @selector(readWithGsonJsonReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$longAdapter_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "write", "LGsonJsonWriter;LJavaUtilConcurrentAtomicAtomicLong;", "LJavaIoIOException;", "read", "LGsonJsonReader;", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "LGsonGson;", "atomicLongAdapterWithGsonTypeAdapter:", "Lcom/google/gson/TypeAdapter<Ljava/util/concurrent/atomic/AtomicLong;>;" };
  static const J2ObjcClassInfo _GsonGson_5 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 3, 1, 6, -1, 7, 8, -1 };
  return &_GsonGson_5;
}

@end


#line 353
void GsonGson_5_initWithGsonTypeAdapter_(GsonGson_5 *self, GsonTypeAdapter *capture$0) {
  self->val$longAdapter_ = capture$0;
  GsonTypeAdapter_init(self);
}


#line 353
GsonGson_5 *new_GsonGson_5_initWithGsonTypeAdapter_(GsonTypeAdapter *capture$0) {
  J2OBJC_NEW_IMPL(GsonGson_5, initWithGsonTypeAdapter_, capture$0)
}


#line 353
GsonGson_5 *create_GsonGson_5_initWithGsonTypeAdapter_(GsonTypeAdapter *capture$0) {
  J2OBJC_CREATE_IMPL(GsonGson_5, initWithGsonTypeAdapter_, capture$0)
}

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/Gson.java"


#line 365
@implementation GsonGson_6


#line 365
- (instancetype)initWithGsonTypeAdapter:(GsonTypeAdapter *)capture$0 {
  GsonGson_6_initWithGsonTypeAdapter_(self, capture$0);
  return self;
}


#line 366
- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(JavaUtilConcurrentAtomicAtomicLongArray *)value {
  (void) [((GsonJsonWriter *) nil_chk(outArg)) beginArray];
  for (jint i = 0, length = [((JavaUtilConcurrentAtomicAtomicLongArray *) nil_chk(value)) length]; i < length; i++) {
    [((GsonTypeAdapter *) nil_chk(val$longAdapter_)) writeWithGsonJsonWriter:outArg withId:JavaLangLong_valueOfWithLong_([value getWithInt:i])];
  }
  (void) [outArg endArray];
}


#line 373
- (JavaUtilConcurrentAtomicAtomicLongArray *)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  id<JavaUtilList> list = new_JavaUtilArrayList_init();
  [((GsonJsonReader *) nil_chk(inArg)) beginArray];
  while ([inArg hasNext]) {
    jlong value = [((NSNumber *) nil_chk([((GsonTypeAdapter *) nil_chk(val$longAdapter_)) readWithGsonJsonReader:inArg])) longLongValue];
    [list addWithId:JavaLangLong_valueOfWithLong_(value)];
  }
  [inArg endArray];
  jint length = [list size];
  JavaUtilConcurrentAtomicAtomicLongArray *array = new_JavaUtilConcurrentAtomicAtomicLongArray_initWithInt_(length);
  for (jint i = 0; i < length; ++i) {
    [array setWithInt:i withLong:[((JavaLangLong *) nil_chk([list getWithInt:i])) longLongValue]];
  }
  return array;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaUtilConcurrentAtomicAtomicLongArray;", 0x1, 3, 4, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithGsonTypeAdapter:);
  methods[1].selector = @selector(writeWithGsonJsonWriter:withId:);
  methods[2].selector = @selector(readWithGsonJsonReader:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$longAdapter_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
  };
  static const void *ptrTable[] = { "write", "LGsonJsonWriter;LJavaUtilConcurrentAtomicAtomicLongArray;", "LJavaIoIOException;", "read", "LGsonJsonReader;", "Lcom/google/gson/TypeAdapter<Ljava/lang/Number;>;", "LGsonGson;", "atomicLongArrayAdapterWithGsonTypeAdapter:", "Lcom/google/gson/TypeAdapter<Ljava/util/concurrent/atomic/AtomicLongArray;>;" };
  static const J2ObjcClassInfo _GsonGson_6 = { "", "com.google.gson", ptrTable, methods, fields, 7, 0x8018, 3, 1, 6, -1, 7, 8, -1 };
  return &_GsonGson_6;
}

@end


#line 365
void GsonGson_6_initWithGsonTypeAdapter_(GsonGson_6 *self, GsonTypeAdapter *capture$0) {
  self->val$longAdapter_ = capture$0;
  GsonTypeAdapter_init(self);
}


#line 365
GsonGson_6 *new_GsonGson_6_initWithGsonTypeAdapter_(GsonTypeAdapter *capture$0) {
  J2OBJC_NEW_IMPL(GsonGson_6, initWithGsonTypeAdapter_, capture$0)
}


#line 365
GsonGson_6 *create_GsonGson_6_initWithGsonTypeAdapter_(GsonTypeAdapter *capture$0) {
  J2OBJC_CREATE_IMPL(GsonGson_6, initWithGsonTypeAdapter_, capture$0)
}

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/Gson.java"


#line 955
@implementation GsonGson_FutureTypeAdapter

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 955
- (instancetype)init {
  GsonGson_FutureTypeAdapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 958
- (void)setDelegateWithGsonTypeAdapter:(GsonTypeAdapter *)typeAdapter {
  if (delegate_ != nil) {
    @throw new_JavaLangAssertionError_init();
  }
  delegate_ = typeAdapter;
}

- (id)readWithGsonJsonReader:(GsonJsonReader *)inArg {
  if (delegate_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  return [delegate_ readWithGsonJsonReader:inArg];
}

- (void)writeWithGsonJsonWriter:(GsonJsonWriter *)outArg
                         withId:(id)value {
  if (delegate_ == nil) {
    @throw new_JavaLangIllegalStateException_init();
  }
  [delegate_ writeWithGsonJsonWriter:outArg withId:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, 5, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 5, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setDelegateWithGsonTypeAdapter:);
  methods[2].selector = @selector(readWithGsonJsonReader:);
  methods[3].selector = @selector(writeWithGsonJsonWriter:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LGsonTypeAdapter;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "setDelegate", "LGsonTypeAdapter;", "(Lcom/google/gson/TypeAdapter<TT;>;)V", "read", "LGsonJsonReader;", "LJavaIoIOException;", "(Lcom/google/gson/stream/JsonReader;)TT;", "write", "LGsonJsonWriter;LNSObject;", "(Lcom/google/gson/stream/JsonWriter;TT;)V", "Lcom/google/gson/TypeAdapter<TT;>;", "LGsonGson;", "<T:Ljava/lang/Object;>Lcom/google/gson/TypeAdapter<TT;>;" };
  static const J2ObjcClassInfo _GsonGson_FutureTypeAdapter = { "FutureTypeAdapter", "com.google.gson", ptrTable, methods, fields, 7, 0x8, 4, 1, 11, -1, -1, 12, -1 };
  return &_GsonGson_FutureTypeAdapter;
}

@end


#line 955
void GsonGson_FutureTypeAdapter_init(GsonGson_FutureTypeAdapter *self) {
  GsonTypeAdapter_init(self);
}


#line 955
GsonGson_FutureTypeAdapter *new_GsonGson_FutureTypeAdapter_init() {
  J2OBJC_NEW_IMPL(GsonGson_FutureTypeAdapter, init)
}


#line 955
GsonGson_FutureTypeAdapter *create_GsonGson_FutureTypeAdapter_init() {
  J2OBJC_CREATE_IMPL(GsonGson_FutureTypeAdapter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonGson_FutureTypeAdapter)
