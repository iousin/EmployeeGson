//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/JsonObject.java
//

#include "J2ObjC_source.h"
#include "JsonArray.h"
#include "JsonElement.h"
#include "JsonNull.h"
#include "JsonObject.h"
#include "JsonPrimitive.h"
#include "LinkedTreeMap.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@interface GsonJsonObject () {
 @public
  GsonLinkedTreeMap *members_;
}

/*!
 @brief Creates the proper <code>JsonElement</code> object from the given <code>value</code> object.
 @param value the object to generate the <code>JsonElement</code>  for
 @return a <code>JsonPrimitive</code> if the <code>value</code> is not null, otherwise a <code>JsonNull</code>
 */
- (GsonJsonElement *)createJsonElementWithId:(id)value;

@end

J2OBJC_FIELD_SETTER(GsonJsonObject, members_, GsonLinkedTreeMap *)

__attribute__((unused)) static GsonJsonElement *GsonJsonObject_createJsonElementWithId_(GsonJsonObject *self, id value);

#line 1 "/Users/ahmedmohammed/intelliJWorkspace/EmployeeGson/employee-gson/src/main/java/com/google/gson/JsonObject.java"


#line 32
@implementation GsonJsonObject

J2OBJC_IGNORE_DESIGNATED_BEGIN

#line 32
- (instancetype)init {
  GsonJsonObject_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END


#line 36
- (GsonJsonObject *)deepCopy {
  
#line 38
  GsonJsonObject *result = new_GsonJsonObject_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((GsonLinkedTreeMap *) nil_chk(members_)) entrySet])) {
    [result addWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withGsonJsonElement:[((GsonJsonElement *) nil_chk([entry_ getValue])) deepCopy]];
  }
  return result;
}


#line 53
- (void)addWithNSString:(NSString *)property
    withGsonJsonElement:(GsonJsonElement *)value {
  if (value == nil) {
    value = JreLoadStatic(GsonJsonNull, INSTANCE);
  }
  (void) [((GsonLinkedTreeMap *) nil_chk(members_)) putWithId:property withId:value];
}


#line 67
- (GsonJsonElement *)removeWithNSString:(NSString *)property {
  return [((GsonLinkedTreeMap *) nil_chk(members_)) removeWithId:property];
}


#line 78
- (void)addPropertyWithNSString:(NSString *)property
                   withNSString:(NSString *)value {
  [self addWithNSString:property withGsonJsonElement:GsonJsonObject_createJsonElementWithId_(self, value)];
}


#line 89
- (void)addPropertyWithNSString:(NSString *)property
                   withNSNumber:(NSNumber *)value {
  [self addWithNSString:property withGsonJsonElement:GsonJsonObject_createJsonElementWithId_(self, value)];
}


#line 100
- (void)addPropertyWithNSString:(NSString *)property
            withJavaLangBoolean:(JavaLangBoolean *)value {
  [self addWithNSString:property withGsonJsonElement:GsonJsonObject_createJsonElementWithId_(self, value)];
}


#line 111
- (void)addPropertyWithNSString:(NSString *)property
          withJavaLangCharacter:(JavaLangCharacter *)value {
  [self addWithNSString:property withGsonJsonElement:GsonJsonObject_createJsonElementWithId_(self, value)];
}


#line 121
- (GsonJsonElement *)createJsonElementWithId:(id)value {
  return GsonJsonObject_createJsonElementWithId_(self, value);
}


#line 131
- (id<JavaUtilSet>)entrySet {
  return [((GsonLinkedTreeMap *) nil_chk(members_)) entrySet];
}


#line 140
- (jint)size {
  return [((GsonLinkedTreeMap *) nil_chk(members_)) size];
}


#line 150
- (jboolean)hasWithNSString:(NSString *)memberName {
  return [((GsonLinkedTreeMap *) nil_chk(members_)) containsKeyWithId:memberName];
}


#line 160
- (GsonJsonElement *)getWithNSString:(NSString *)memberName {
  return [((GsonLinkedTreeMap *) nil_chk(members_)) getWithId:memberName];
}


#line 170
- (GsonJsonPrimitive *)getAsJsonPrimitiveWithNSString:(NSString *)memberName {
  return (GsonJsonPrimitive *) cast_chk([((GsonLinkedTreeMap *) nil_chk(members_)) getWithId:memberName], [GsonJsonPrimitive class]);
}


#line 180
- (GsonJsonArray *)getAsJsonArrayWithNSString:(NSString *)memberName {
  return (GsonJsonArray *) cast_chk([((GsonLinkedTreeMap *) nil_chk(members_)) getWithId:memberName], [GsonJsonArray class]);
}


#line 190
- (GsonJsonObject *)getAsJsonObjectWithNSString:(NSString *)memberName {
  return (GsonJsonObject *) cast_chk([((GsonLinkedTreeMap *) nil_chk(members_)) getWithId:memberName], [GsonJsonObject class]);
}

- (jboolean)isEqual:(id)o {
  
#line 196
  return (o == self) || ([o isKindOfClass:[GsonJsonObject class]] &&
#line 197
  [((GsonLinkedTreeMap *) nil_chk(((GsonJsonObject *) nil_chk(((GsonJsonObject *) cast_chk(o, [GsonJsonObject class]))))->members_)) isEqual:members_]);
}


#line 200
- (NSUInteger)hash {
  
#line 202
  return ((jint) [((GsonLinkedTreeMap *) nil_chk(members_)) hash]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonObject;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 8, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "LGsonJsonElement;", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "LGsonJsonPrimitive;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "LGsonJsonArray;", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "LGsonJsonObject;", 0x1, 16, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(deepCopy);
  methods[2].selector = @selector(addWithNSString:withGsonJsonElement:);
  methods[3].selector = @selector(removeWithNSString:);
  methods[4].selector = @selector(addPropertyWithNSString:withNSString:);
  methods[5].selector = @selector(addPropertyWithNSString:withNSNumber:);
  methods[6].selector = @selector(addPropertyWithNSString:withJavaLangBoolean:);
  methods[7].selector = @selector(addPropertyWithNSString:withJavaLangCharacter:);
  methods[8].selector = @selector(createJsonElementWithId:);
  methods[9].selector = @selector(entrySet);
  methods[10].selector = @selector(size);
  methods[11].selector = @selector(hasWithNSString:);
  methods[12].selector = @selector(getWithNSString:);
  methods[13].selector = @selector(getAsJsonPrimitiveWithNSString:);
  methods[14].selector = @selector(getAsJsonArrayWithNSString:);
  methods[15].selector = @selector(getAsJsonObjectWithNSString:);
  methods[16].selector = @selector(isEqual:);
  methods[17].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "members_", "LGsonLinkedTreeMap;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "add", "LNSString;LGsonJsonElement;", "remove", "LNSString;", "addProperty", "LNSString;LNSString;", "LNSString;LNSNumber;", "LNSString;LJavaLangBoolean;", "LNSString;LJavaLangCharacter;", "createJsonElement", "LNSObject;", "()Ljava/util/Set<Ljava/util/Map$Entry<Ljava/lang/String;Lcom/google/gson/JsonElement;>;>;", "has", "get", "getAsJsonPrimitive", "getAsJsonArray", "getAsJsonObject", "equals", "hashCode", "Lcom/google/gson/internal/LinkedTreeMap<Ljava/lang/String;Lcom/google/gson/JsonElement;>;" };
  static const J2ObjcClassInfo _GsonJsonObject = { "JsonObject", "com.google.gson", ptrTable, methods, fields, 7, 0x11, 18, 1, -1, -1, -1, -1, -1 };
  return &_GsonJsonObject;
}

@end


#line 32
void GsonJsonObject_init(GsonJsonObject *self) {
  GsonJsonElement_init(self);
  self->members_ = new_GsonLinkedTreeMap_init();
}


#line 32
GsonJsonObject *new_GsonJsonObject_init() {
  J2OBJC_NEW_IMPL(GsonJsonObject, init)
}


#line 32
GsonJsonObject *create_GsonJsonObject_init() {
  J2OBJC_CREATE_IMPL(GsonJsonObject, init)
}


#line 121
GsonJsonElement *GsonJsonObject_createJsonElementWithId_(GsonJsonObject *self, id value) {
  return value == nil ? JreLoadStatic(GsonJsonNull, INSTANCE) : (id) new_GsonJsonPrimitive_initWithId_(value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GsonJsonObject)

J2OBJC_NAME_MAPPING(GsonJsonObject, "com.google.gson", "Gson")
