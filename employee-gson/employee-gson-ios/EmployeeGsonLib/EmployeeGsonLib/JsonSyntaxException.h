//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/JsonSyntaxException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonSyntaxException")
#ifdef RESTRICT_JsonSyntaxException
#define INCLUDE_ALL_JsonSyntaxException 0
#else
#define INCLUDE_ALL_JsonSyntaxException 1
#endif
#undef RESTRICT_JsonSyntaxException

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GsonJsonSyntaxException_) && (INCLUDE_ALL_JsonSyntaxException || defined(INCLUDE_GsonJsonSyntaxException))
#define GsonJsonSyntaxException_

#define RESTRICT_JsonParseException 1
#define INCLUDE_GsonJsonParseException 1
#include "JsonParseException.h"

@class JavaLangThrowable;

/*!
 @brief This exception is raised when Gson attempts to read (or write) a malformed
  JSON element.
 @author Inderjeet Singh
 @author Joel Leitch
 */
@interface GsonJsonSyntaxException : GsonJsonParseException

#pragma mark Public

- (instancetype __nonnull)initWithNSString:(NSString *)msg;

- (instancetype __nonnull)initWithNSString:(NSString *)msg
                     withJavaLangThrowable:(JavaLangThrowable *)cause;

/*!
 @brief Creates exception with the specified cause.Consider using 
 <code>Throwable)</code> instead if you can
  describe what actually happened.
 @param cause root exception that caused this exception to be thrown.
 */
- (instancetype __nonnull)initWithJavaLangThrowable:(JavaLangThrowable *)cause;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonJsonSyntaxException)

FOUNDATION_EXPORT void GsonJsonSyntaxException_initWithNSString_(GsonJsonSyntaxException *self, NSString *msg);

FOUNDATION_EXPORT GsonJsonSyntaxException *new_GsonJsonSyntaxException_initWithNSString_(NSString *msg) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonSyntaxException *create_GsonJsonSyntaxException_initWithNSString_(NSString *msg);

FOUNDATION_EXPORT void GsonJsonSyntaxException_initWithNSString_withJavaLangThrowable_(GsonJsonSyntaxException *self, NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT GsonJsonSyntaxException *new_GsonJsonSyntaxException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonSyntaxException *create_GsonJsonSyntaxException_initWithNSString_withJavaLangThrowable_(NSString *msg, JavaLangThrowable *cause);

FOUNDATION_EXPORT void GsonJsonSyntaxException_initWithJavaLangThrowable_(GsonJsonSyntaxException *self, JavaLangThrowable *cause);

FOUNDATION_EXPORT GsonJsonSyntaxException *new_GsonJsonSyntaxException_initWithJavaLangThrowable_(JavaLangThrowable *cause) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonSyntaxException *create_GsonJsonSyntaxException_initWithJavaLangThrowable_(JavaLangThrowable *cause);

J2OBJC_TYPE_LITERAL_HEADER(GsonJsonSyntaxException)

@compatibility_alias ComGoogleGsonJsonSyntaxException GsonJsonSyntaxException;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JsonSyntaxException")
