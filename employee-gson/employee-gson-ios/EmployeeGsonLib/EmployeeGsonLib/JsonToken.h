//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/stream/JsonToken.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonToken")
#ifdef RESTRICT_JsonToken
#define INCLUDE_ALL_JsonToken 0
#else
#define INCLUDE_ALL_JsonToken 1
#endif
#undef RESTRICT_JsonToken

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GsonJsonToken_) && (INCLUDE_ALL_JsonToken || defined(INCLUDE_GsonJsonToken))
#define GsonJsonToken_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, GsonJsonToken_Enum) {
  GsonJsonToken_Enum_BEGIN_ARRAY = 0,
  GsonJsonToken_Enum_END_ARRAY = 1,
  GsonJsonToken_Enum_BEGIN_OBJECT = 2,
  GsonJsonToken_Enum_END_OBJECT = 3,
  GsonJsonToken_Enum_NAME = 4,
  GsonJsonToken_Enum_STRING = 5,
  GsonJsonToken_Enum_NUMBER = 6,
  GsonJsonToken_Enum_BOOLEAN = 7,
  GsonJsonToken_Enum_NULL = 8,
  GsonJsonToken_Enum_END_DOCUMENT = 9,
};

/*!
 @brief A structure, name or value type in a JSON-encoded string.
 @author Jesse Wilson
 @since 1.6
 */
@interface GsonJsonToken : JavaLangEnum

+ (GsonJsonToken * __nonnull)BEGIN_ARRAY;

+ (GsonJsonToken * __nonnull)END_ARRAY;

+ (GsonJsonToken * __nonnull)BEGIN_OBJECT;

+ (GsonJsonToken * __nonnull)END_OBJECT;

+ (GsonJsonToken * __nonnull)NAME;

+ (GsonJsonToken * __nonnull)STRING;

+ (GsonJsonToken * __nonnull)NUMBER;

+ (GsonJsonToken * __nonnull)BOOLEAN;

+ (GsonJsonToken * __nonnull)NULL_;

+ (GsonJsonToken * __nonnull)END_DOCUMENT;

#pragma mark Public

+ (GsonJsonToken *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (GsonJsonToken_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(GsonJsonToken)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT GsonJsonToken *GsonJsonToken_values_[];

/*!
 @brief The opening of a JSON array.Written using <code>JsonWriter.beginArray</code>
  and read using <code>JsonReader.beginArray</code>.
 */
inline GsonJsonToken *GsonJsonToken_get_BEGIN_ARRAY(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, BEGIN_ARRAY)

/*!
 @brief The closing of a JSON array.Written using <code>JsonWriter.endArray</code>
  and read using <code>JsonReader.endArray</code>.
 */
inline GsonJsonToken *GsonJsonToken_get_END_ARRAY(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, END_ARRAY)

/*!
 @brief The opening of a JSON object.Written using <code>JsonWriter.beginObject</code>
  and read using <code>JsonReader.beginObject</code>.
 */
inline GsonJsonToken *GsonJsonToken_get_BEGIN_OBJECT(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, BEGIN_OBJECT)

/*!
 @brief The closing of a JSON object.Written using <code>JsonWriter.endObject</code>
  and read using <code>JsonReader.endObject</code>.
 */
inline GsonJsonToken *GsonJsonToken_get_END_OBJECT(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, END_OBJECT)

/*!
 @brief A JSON property name.Within objects, tokens alternate between names and
  their values.
 Written using <code>JsonWriter.name</code> and read using <code>JsonReader.nextName</code>
 */
inline GsonJsonToken *GsonJsonToken_get_NAME(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, NAME)

/*!
 @brief A JSON string.
 */
inline GsonJsonToken *GsonJsonToken_get_STRING(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, STRING)

/*!
 @brief A JSON number represented in this API by a Java <code>double</code>, <code>long</code>
 , or <code>int</code>.
 */
inline GsonJsonToken *GsonJsonToken_get_NUMBER(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, NUMBER)

/*!
 @brief A JSON <code>true</code> or <code>false</code>.
 */
inline GsonJsonToken *GsonJsonToken_get_BOOLEAN(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, BOOLEAN)

/*!
 @brief A JSON <code>null</code>.
 */
inline GsonJsonToken *GsonJsonToken_get_NULL(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, NULL)

/*!
 @brief The end of the JSON stream.This sentinel value is returned by <code>JsonReader.peek()</code>
  to signal that the JSON-encoded value has no more
  tokens.
 */
inline GsonJsonToken *GsonJsonToken_get_END_DOCUMENT(void);
J2OBJC_ENUM_CONSTANT(GsonJsonToken, END_DOCUMENT)

FOUNDATION_EXPORT IOSObjectArray *GsonJsonToken_values(void);

FOUNDATION_EXPORT GsonJsonToken *GsonJsonToken_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT GsonJsonToken *GsonJsonToken_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(GsonJsonToken)

@compatibility_alias ComGoogleGsonStreamJsonToken GsonJsonToken;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JsonToken")
