//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/JsonParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_JsonParser")
#ifdef RESTRICT_JsonParser
#define INCLUDE_ALL_JsonParser 0
#else
#define INCLUDE_ALL_JsonParser 1
#endif
#undef RESTRICT_JsonParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GsonJsonParser_) && (INCLUDE_ALL_JsonParser || defined(INCLUDE_GsonJsonParser))
#define GsonJsonParser_

@class GsonJsonElement;
@class GsonJsonReader;
@class JavaIoReader;

/*!
 @brief A parser to parse Json into a parse tree of <code>JsonElement</code>s
 @author Inderjeet Singh
 @author Joel Leitch
 @since 1.3
 */
@interface GsonJsonParser : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief Returns the next value from the JSON stream as a parse tree.
 @throw JsonParseExceptionif there is an IOException or if the specified
      text is not valid JSON
 @since 1.6
 */
- (GsonJsonElement *)parseWithGsonJsonReader:(GsonJsonReader *)json;

/*!
 @brief Parses the specified JSON string into a parse tree
 @param json JSON text
 @return a parse tree of <code>JsonElement</code>s corresponding to the specified JSON
 @throw JsonParseExceptionif the specified text is not valid JSON
 @since 1.3
 */
- (GsonJsonElement *)parseWithJavaIoReader:(JavaIoReader *)json;

/*!
 @brief Parses the specified JSON string into a parse tree
 @param json JSON text
 @return a parse tree of <code>JsonElement</code>s corresponding to the specified JSON
 @throw JsonParseExceptionif the specified text is not valid JSON
 @since 1.3
 */
- (GsonJsonElement *)parseWithNSString:(NSString *)json;

@end

J2OBJC_EMPTY_STATIC_INIT(GsonJsonParser)

FOUNDATION_EXPORT void GsonJsonParser_init(GsonJsonParser *self);

FOUNDATION_EXPORT GsonJsonParser *new_GsonJsonParser_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT GsonJsonParser *create_GsonJsonParser_init(void);

J2OBJC_TYPE_LITERAL_HEADER(GsonJsonParser)

@compatibility_alias ComGoogleGsonJsonParser GsonJsonParser;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_JsonParser")
