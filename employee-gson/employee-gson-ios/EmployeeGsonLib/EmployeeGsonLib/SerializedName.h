//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./src/main/java/com/google/gson/annotations/SerializedName.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_SerializedName")
#ifdef RESTRICT_SerializedName
#define INCLUDE_ALL_SerializedName 0
#else
#define INCLUDE_ALL_SerializedName 1
#endif
#undef RESTRICT_SerializedName

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (GsonSerializedName_) && (INCLUDE_ALL_SerializedName || defined(INCLUDE_GsonSerializedName))
#define GsonSerializedName_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

@class IOSClass;
@class IOSObjectArray;

/*!
 @brief An annotation that indicates this member should be serialized to JSON with
  the provided name value as its field name.
 <p>This annotation will override any <code>com.google.gson.FieldNamingPolicy</code>, including
  the default field naming policy, that may have been set on the <code>com.google.gson.Gson</code>
  instance.  A different naming policy can set using the <code>GsonBuilder</code> class.  See 
 <code>com.google.gson.GsonBuilder</code>
  for more information.</p>
  
 <p>Here is an example of how this annotation is meant to be used:</p>
  @code

  public class MyClass {
      &#64SerializedName("name") String a;
      &#64SerializedName(value="name1", alternate={"name2", "name3"}) String b;
    String c;
    public MyClass(String a, String b, String c) {
      this.a = a;
      this.b = b;
      this.c = c;
    }  }  
  
@endcode
  
 <p>The following shows the output that is generated when serializing an instance of the
  above example class:</p>
  @code

  MyClass target = new MyClass("v1", "v2", "v3");
  Gson gson = new Gson();
  String json = gson.toJson(target);
  System.out.println(json);
  ===== OUTPUT =====
  {"name":"v1","name1":"v2","c":"v3"} 
  
@endcode
  
 <p>NOTE: The value you specify in this annotation must be a valid JSON field name.</p>
  While deserializing, all values specified in the annotation will be deserialized into the field.
  For example: 
 @code

    MyClass target = gson.fromJson("{'name1':'v1'}", MyClass.class);
    assertEquals("v1", target.b);
    target = gson.fromJson("{'name2':'v2'}", MyClass.class);
    assertEquals("v2", target.b);
    target = gson.fromJson("{'name3':'v3'}", MyClass.class);
    assertEquals("v3", target.b); 
  
@endcode
  Note that MyClass.b is now deserialized from either name1, name2 or name3.
 - seealso: com.google.gson.FieldNamingPolicy
 @author Inderjeet Singh
 @author Joel Leitch
 */
@protocol GsonSerializedName < JavaLangAnnotationAnnotation >

@property (readonly) NSString *value;
@property (readonly) IOSObjectArray *alternate;

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

@end

@interface GsonSerializedName : NSObject < GsonSerializedName > {
 @public
  NSString *value_;
  IOSObjectArray *alternate_;
}

@end

J2OBJC_EMPTY_STATIC_INIT(GsonSerializedName)

FOUNDATION_EXPORT id<GsonSerializedName> create_GsonSerializedName(IOSObjectArray *alternate, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(GsonSerializedName)

#define ComGoogleGsonAnnotationsSerializedName GsonSerializedName

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_SerializedName")
